

============================== 13:36:33.983119 | bf1c846c-0506-4328-9de0-69c123f8e292 ==============================
[0m13:36:33.983119 [info ] [MainThread]: Running with dbt=1.7.6
[0m13:36:33.998192 [debug] [MainThread]: running dbt with arguments {'printer_width': '120', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'version_check': 'True', 'log_path': 'D:\\dbt-folder\\fact_dimensions\\logs', 'fail_fast': 'False', 'profiles_dir': 'D:\\dbt-folder\\fact_dimensions', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt debug', 'static_parser': 'True', 'log_format': 'default', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'False'}
[0m13:36:33.998960 [info ] [MainThread]: dbt version: 1.7.6
[0m13:36:33.998960 [info ] [MainThread]: python version: 3.9.0
[0m13:36:33.998960 [info ] [MainThread]: python path: d:\dbt-folder\scripts\python.exe
[0m13:36:34.000126 [info ] [MainThread]: os info: Windows-10-10.0.22621-SP0
[0m13:36:34.709264 [info ] [MainThread]: Using profiles dir at D:\dbt-folder\fact_dimensions
[0m13:36:34.709264 [info ] [MainThread]: Using profiles.yml file at D:\dbt-folder\fact_dimensions\profiles.yml
[0m13:36:34.709264 [info ] [MainThread]: Using dbt_project.yml file at D:\dbt-folder\fact_dimensions\dbt_project.yml
[0m13:36:34.711246 [info ] [MainThread]: adapter type: postgres
[0m13:36:34.712266 [info ] [MainThread]: adapter version: 1.7.5
[0m13:36:34.794463 [info ] [MainThread]: Configuration:
[0m13:36:34.794463 [info ] [MainThread]:   profiles.yml file [[32mOK found and valid[0m]
[0m13:36:34.795421 [info ] [MainThread]:   dbt_project.yml file [[32mOK found and valid[0m]
[0m13:36:34.795421 [info ] [MainThread]: Required dependencies:
[0m13:36:34.795421 [debug] [MainThread]: Executing "git --help"
[0m13:36:34.843661 [debug] [MainThread]: STDOUT: "b"usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           [--config-env=<name>=<envvar>] <command> [<args>]\n\nThese are common Git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\n   clone     Clone a repository into a new directory\n   init      Create an empty Git repository or reinitialize an existing one\n\nwork on the current change (see also: git help everyday)\n   add       Add file contents to the index\n   mv        Move or rename a file, a directory, or a symlink\n   restore   Restore working tree files\n   rm        Remove files from the working tree and from the index\n\nexamine the history and state (see also: git help revisions)\n   bisect    Use binary search to find the commit that introduced a bug\n   diff      Show changes between commits, commit and working tree, etc\n   grep      Print lines matching a pattern\n   log       Show commit logs\n   show      Show various types of objects\n   status    Show the working tree status\n\ngrow, mark and tweak your common history\n   branch    List, create, or delete branches\n   commit    Record changes to the repository\n   merge     Join two or more development histories together\n   rebase    Reapply commits on top of another base tip\n   reset     Reset current HEAD to the specified state\n   switch    Switch branches\n   tag       Create, list, delete or verify a tag object signed with GPG\n\ncollaborate (see also: git help workflows)\n   fetch     Download objects and refs from another repository\n   pull      Fetch from and integrate with another repository or a local branch\n   push      Update remote refs along with associated objects\n\n'git help -a' and 'git help -g' list available subcommands and some\nconcept guides. See 'git help <command>' or 'git help <concept>'\nto read about a specific subcommand or concept.\nSee 'git help git' for an overview of the system.\n""
[0m13:36:34.843661 [debug] [MainThread]: STDERR: "b''"
[0m13:36:34.844668 [info ] [MainThread]:  - git [[32mOK found[0m]

[0m13:36:34.844668 [info ] [MainThread]: Connection:
[0m13:36:34.844668 [info ] [MainThread]:   host: 10.10.93.2
[0m13:36:34.845669 [info ] [MainThread]:   port: 5432
[0m13:36:34.845669 [info ] [MainThread]:   user: postgres
[0m13:36:34.845669 [info ] [MainThread]:   database: dbt
[0m13:36:34.846668 [info ] [MainThread]:   schema: dbt-facts
[0m13:36:34.846668 [info ] [MainThread]:   connect_timeout: 10
[0m13:36:34.846668 [info ] [MainThread]:   role: None
[0m13:36:34.847667 [info ] [MainThread]:   search_path: None
[0m13:36:34.847667 [info ] [MainThread]:   keepalives_idle: 0
[0m13:36:34.847667 [info ] [MainThread]:   sslmode: None
[0m13:36:34.848668 [info ] [MainThread]:   sslcert: None
[0m13:36:34.848668 [info ] [MainThread]:   sslkey: None
[0m13:36:34.850060 [info ] [MainThread]:   sslrootcert: None
[0m13:36:34.850060 [info ] [MainThread]:   application_name: dbt
[0m13:36:34.850060 [info ] [MainThread]:   retries: 1
[0m13:36:34.851065 [info ] [MainThread]: Registered adapter: postgres=1.7.5
[0m13:36:34.852075 [debug] [MainThread]: Acquiring new postgres connection 'debug'
[0m13:36:34.853075 [debug] [MainThread]: Using postgres connection "debug"
[0m13:36:34.854068 [debug] [MainThread]: On debug: select 1 as id
[0m13:36:34.854068 [debug] [MainThread]: Opening a new connection, currently in state init
[0m13:36:34.957181 [debug] [MainThread]: SQL status: SELECT 1 in 0.0 seconds
[0m13:36:34.959157 [debug] [MainThread]: On debug: Close
[0m13:36:34.960159 [info ] [MainThread]:   Connection test: [[32mOK connection ok[0m]

[0m13:36:34.961154 [info ] [MainThread]: [32mAll checks passed![0m
[0m13:36:34.962148 [debug] [MainThread]: Command `dbt debug` succeeded at 13:36:34.962148 after 1.06 seconds
[0m13:36:34.963157 [debug] [MainThread]: Connection 'debug' was properly closed.
[0m13:36:34.963157 [debug] [MainThread]: Flushing usage events


============================== 13:36:41.792273 | 3399eba1-5a35-4dd7-a7dd-e63b8124b860 ==============================
[0m13:36:41.792273 [info ] [MainThread]: Running with dbt=1.7.6
[0m13:36:41.797352 [debug] [MainThread]: running dbt with arguments {'printer_width': '120', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': 'D:\\dbt-folder\\fact_dimensions', 'fail_fast': 'False', 'debug': 'False', 'log_path': 'D:\\dbt-folder\\fact_dimensions\\logs', 'warn_error': 'None', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'static_parser': 'True', 'introspect': 'True', 'invocation_command': 'dbt run', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'False'}
[0m13:36:42.145327 [info ] [MainThread]: Registered adapter: postgres=1.7.5
[0m13:36:42.155329 [debug] [MainThread]: checksum: d62e513342251256fdf8c77c78ccf3e0bf76720e6e4e8384a98b7479399def9a, vars: {}, profile: , target: , version: 1.7.6
[0m13:36:42.156329 [info ] [MainThread]: Unable to do partial parsing because saved manifest not found. Starting full parse.
[0m13:36:43.346879 [error] [MainThread]: Encountered an error:
Parsing Error
  Invalid sources config given in models\sources.yml @ sources: {'name': 'public', 'databse': 'dbt', 'tables': [{'name': 'meeza_cost'}, {'name': 'txn_proc_cost_table'}, {'name': 'date_dimension'}, {'name': 'time_dimension'}]} - at path []: Additional properties are not allowed ('databse' was unexpected)
[0m13:36:43.347908 [debug] [MainThread]: Command `dbt run` failed at 13:36:43.347908 after 1.60 seconds
[0m13:36:43.347908 [debug] [MainThread]: Flushing usage events


============================== 13:43:00.996772 | 5bfabb87-4611-4a06-a97e-74a15ebf18b0 ==============================
[0m13:43:00.996772 [info ] [MainThread]: Running with dbt=1.7.6
[0m13:43:01.003772 [debug] [MainThread]: running dbt with arguments {'printer_width': '120', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'fail_fast': 'False', 'log_path': 'D:\\dbt-folder\\fact_dimensions\\logs', 'version_check': 'True', 'profiles_dir': 'D:\\dbt-folder\\fact_dimensions', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'invocation_command': 'dbt run', 'introspect': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'False'}
[0m13:43:01.236730 [info ] [MainThread]: Registered adapter: postgres=1.7.5
[0m13:43:01.242831 [debug] [MainThread]: checksum: d62e513342251256fdf8c77c78ccf3e0bf76720e6e4e8384a98b7479399def9a, vars: {}, profile: , target: , version: 1.7.6
[0m13:43:01.243830 [info ] [MainThread]: Unable to do partial parsing because saved manifest not found. Starting full parse.
[0m13:43:02.179728 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.transactions_fact.example
[0m13:43:02.221882 [info ] [MainThread]: Found 1 model, 11 sources, 0 exposures, 0 metrics, 401 macros, 0 groups, 0 semantic models
[0m13:43:02.223881 [info ] [MainThread]: 
[0m13:43:02.224878 [debug] [MainThread]: Acquiring new postgres connection 'master'
[0m13:43:02.225878 [debug] [ThreadPool]: Acquiring new postgres connection 'list_dbt'
[0m13:43:02.237878 [debug] [ThreadPool]: Using postgres connection "list_dbt"
[0m13:43:02.237878 [debug] [ThreadPool]: On list_dbt: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "list_dbt"} */

    select distinct nspname from pg_namespace
  
[0m13:43:02.237878 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m13:43:02.301355 [debug] [ThreadPool]: SQL status: SELECT 8 in 0.0 seconds
[0m13:43:02.302352 [debug] [ThreadPool]: On list_dbt: Close
[0m13:43:02.305355 [debug] [ThreadPool]: Acquiring new postgres connection 'list_dbt_dbt-facts'
[0m13:43:02.310353 [debug] [ThreadPool]: Using postgres connection "list_dbt_dbt-facts"
[0m13:43:02.311450 [debug] [ThreadPool]: On list_dbt_dbt-facts: BEGIN
[0m13:43:02.311450 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m13:43:02.384830 [debug] [ThreadPool]: SQL status: BEGIN in 0.0 seconds
[0m13:43:02.385826 [debug] [ThreadPool]: Using postgres connection "list_dbt_dbt-facts"
[0m13:43:02.386820 [debug] [ThreadPool]: On list_dbt_dbt-facts: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "list_dbt_dbt-facts"} */
select
      'dbt' as database,
      tablename as name,
      schemaname as schema,
      'table' as type
    from pg_tables
    where schemaname ilike 'dbt-facts'
    union all
    select
      'dbt' as database,
      viewname as name,
      schemaname as schema,
      'view' as type
    from pg_views
    where schemaname ilike 'dbt-facts'
    union all
    select
      'dbt' as database,
      matviewname as name,
      schemaname as schema,
      'materialized_view' as type
    from pg_matviews
    where schemaname ilike 'dbt-facts'
  
[0m13:43:02.409087 [debug] [ThreadPool]: SQL status: SELECT 1 in 0.0 seconds
[0m13:43:02.412003 [debug] [ThreadPool]: On list_dbt_dbt-facts: ROLLBACK
[0m13:43:02.435309 [debug] [ThreadPool]: On list_dbt_dbt-facts: Close
[0m13:43:02.440292 [debug] [MainThread]: Using postgres connection "master"
[0m13:43:02.441292 [debug] [MainThread]: On master: BEGIN
[0m13:43:02.441292 [debug] [MainThread]: Opening a new connection, currently in state init
[0m13:43:02.504903 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m13:43:02.505802 [debug] [MainThread]: Using postgres connection "master"
[0m13:43:02.506794 [debug] [MainThread]: On master: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "master"} */
with relation as (
        select
            pg_rewrite.ev_class as class,
            pg_rewrite.oid as id
        from pg_rewrite
    ),
    class as (
        select
            oid as id,
            relname as name,
            relnamespace as schema,
            relkind as kind
        from pg_class
    ),
    dependency as (
        select distinct
            pg_depend.objid as id,
            pg_depend.refobjid as ref
        from pg_depend
    ),
    schema as (
        select
            pg_namespace.oid as id,
            pg_namespace.nspname as name
        from pg_namespace
        where nspname != 'information_schema' and nspname not like 'pg\_%'
    ),
    referenced as (
        select
            relation.id AS id,
            referenced_class.name ,
            referenced_class.schema ,
            referenced_class.kind
        from relation
        join class as referenced_class on relation.class=referenced_class.id
        where referenced_class.kind in ('r', 'v', 'm')
    ),
    relationships as (
        select
            referenced.name as referenced_name,
            referenced.schema as referenced_schema_id,
            dependent_class.name as dependent_name,
            dependent_class.schema as dependent_schema_id,
            referenced.kind as kind
        from referenced
        join dependency on referenced.id=dependency.id
        join class as dependent_class on dependency.ref=dependent_class.id
        where
            (referenced.name != dependent_class.name or
             referenced.schema != dependent_class.schema)
    )

    select
        referenced_schema.name as referenced_schema,
        relationships.referenced_name as referenced_name,
        dependent_schema.name as dependent_schema,
        relationships.dependent_name as dependent_name
    from relationships
    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id
    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id
    group by referenced_schema, referenced_name, dependent_schema, dependent_name
    order by referenced_schema, referenced_name, dependent_schema, dependent_name;
[0m13:43:02.568146 [debug] [MainThread]: SQL status: SELECT 0 in 0.0 seconds
[0m13:43:02.572125 [debug] [MainThread]: On master: ROLLBACK
[0m13:43:02.579285 [debug] [MainThread]: Using postgres connection "master"
[0m13:43:02.580302 [debug] [MainThread]: On master: BEGIN
[0m13:43:02.590258 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m13:43:02.591354 [debug] [MainThread]: On master: COMMIT
[0m13:43:02.592350 [debug] [MainThread]: Using postgres connection "master"
[0m13:43:02.592350 [debug] [MainThread]: On master: COMMIT
[0m13:43:02.597370 [debug] [MainThread]: SQL status: COMMIT in 0.0 seconds
[0m13:43:02.598341 [debug] [MainThread]: On master: Close
[0m13:43:02.601257 [info ] [MainThread]: Concurrency: 1 threads (target='dev')
[0m13:43:02.602364 [info ] [MainThread]: 
[0m13:43:02.618875 [debug] [Thread-1  ]: Began running node model.fact_dimensions.transactions_fact
[0m13:43:02.619883 [info ] [Thread-1  ]: 1 of 1 START sql table model dbt-facts.transactions_fact ............................................................... [RUN]
[0m13:43:02.619883 [debug] [Thread-1  ]: Acquiring new postgres connection 'model.fact_dimensions.transactions_fact'
[0m13:43:02.620882 [debug] [Thread-1  ]: Began compiling node model.fact_dimensions.transactions_fact
[0m13:43:02.635937 [debug] [Thread-1  ]: Writing injected SQL for node "model.fact_dimensions.transactions_fact"
[0m13:43:02.640996 [debug] [Thread-1  ]: Timing info for model.fact_dimensions.transactions_fact (compile): 13:43:02.620882 => 13:43:02.639887
[0m13:43:02.641882 [debug] [Thread-1  ]: Began executing node model.fact_dimensions.transactions_fact
[0m13:43:02.673978 [debug] [Thread-1  ]: Writing runtime sql for node "model.fact_dimensions.transactions_fact"
[0m13:43:02.676900 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m13:43:02.677904 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: BEGIN
[0m13:43:02.677904 [debug] [Thread-1  ]: Opening a new connection, currently in state init
[0m13:43:02.735494 [debug] [Thread-1  ]: SQL status: BEGIN in 0.0 seconds
[0m13:43:02.735494 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m13:43:02.737618 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "node_id": "model.fact_dimensions.transactions_fact"} */

  
    

  create  table "dbt"."dbt-facts"."transactions_fact__dbt_tmp"
  
  
    as
  
  (
    -- models/transactions_fact.sql



WITH cost_table AS (
         SELECT 
             td.*,
             mc.amount                                      as meeza_processing_fees,
             0                                              AS corepay_fees,
             CAST(mc.amount AS DECIMAL(10, 2))              as total_fees_cost_before_vat,
             CAST(mc.vat * mc.amount AS DECIMAL(10, 2))     as total_fees_cost_after_vat,
             0                                              AS employee_discount,
             0                                              AS transaction_discount,
             0                                              AS discount,
             null                                           AS entity,
             null                                           AS protocol,
             0                                              as price,
             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.amount AS DECIMAL(10, 2))
                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_before_vat,
             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.vat * mc.amount AS DECIMAL(10, 2))
                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        JOIN "dbt"."public"."meeza_cost" mc on td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain
        WHERE txntype in
                ('TransactionTypes_RECEIVE_P2P', 'TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN',
                 'TransactionTypes_RECEIVE_AGENT_CASH_IN', 'TransactionTypes_RECEIVE_DEPOSIT',
                 'TransactionTypes_RECEIVE_EXPAYNET')
        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT 
            td.*,
            0                AS meeza_processing_fees,
            0                AS corepay_fees,
            0                AS total_fees_cost_before_vat,
            0                AS total_fees_cost_after_vat,
            0                AS employee_discount,
            0                AS transaction_discount,
            0                AS discount,
            null             AS entity,
            null             AS protocol,
            0                as price,
            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2
              ELSE 0 END) as total_cost_before_vat,
            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2
              ELSE 0 END) as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')
        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
        
        UNION
        
        SELECT 
            td.*,
            0                                                                    AS meeza_processing_fees,
            COALESCE(bt.corepayfees::float, 0)                                   as corepay_fees,
            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_before_vat,
            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_after_vat,
            0                                                                    AS employee_discount,
            0                                                                    AS transaction_discount,
            COALESCE(bp.discount::float, 0)                                      as discount,
            tp.entity,
            tp.protocol,
            tp.price,
            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_before_vat,
            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."bankpaymenttransactions" bt ON td.txndetailsid = bt.originaltransactionid
        LEFT JOIN "dbt"."axis_sme"."bankpayments" bp ON bt.bankpaymentid = bp.bankpaymentid
        LEFT JOIN "dbt"."public"."txn_proc_cost_table" tp ON td.txntype = tp.transactiontype
              AND td.transaction_createdat_utc2 between tp.createdat and COALESCE(tp.endedat, now())

        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION
        
        SELECT 
            td.*,
            mc.amount                                                                    meeza_processing_fees,
            0                                                                         as corepay_fees,
            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_fees_cost_before_vat,
            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_fees_cost_after_vat,
            coalesce(employeefeesdiscount::float, 0)                                  as employee_discount,
            coalesce(transactionfeesdiscount::float, 0)                               as transaction_discount,
            coalesce(employeefeesdiscount::float + transactionfeesdiscount::float, 0) as discount,
            NULL                                                                      as entity,
            NULL                                                                      as protocol,
            NULL                                                                      as price,
            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +
            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_cost_before_vat,
            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +
            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."public"."meeza_cost" mc ON td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain
        LEFT JOIN "dbt"."dbt-dimensions"."transactions_dimension" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
),


revenue_table AS (
        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            coalesce(bp.vat::float, 0) as bank_vat,
            coalesce(bp.vat::float, 0) as total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            coalesce(bt.axisfees_aibyte_transform::float, 0) as bank_fees,
            coalesce(bt.axisfees_aibyte_transform::float, 0) as total_revenue_before_vat,
            coalesce(bt.axisfees_aibyte_transform::float, 0) * coalesce(bp.vat::float, 1) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."bankpaymenttransactions" bt ON td.txndetailsid = bt.originaltransactionid
        LEFT JOIN "dbt"."axis_sme"."bankpayments" bp ON bt.bankpaymentid = bp.bankpaymentid
        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT' AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE') AND isreversedflag = false

        UNION

        SELECT
            td.*,
            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,
            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,
            0 AS bank_vat,
            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,
            coalesce(employeefees::float, 0) as employee_fees,
            coalesce(fees_aibyte_transform::float, 0) as transaction_fees,
            0 AS bank_fees,
            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,
            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'
                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,
            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,
            0 AS bank_vat,
            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,
            employeefees::float as employee_fees,
            fees_aibyte_transform::float as transaction_fees,
            0 AS bank_fees,
            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,
            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat


        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_PAYROLL_DEPOSIT'
                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            coalesce(td.amount::float, 0) AS total_revenue_before_vat,
            coalesce(td.amount::float, 0) AS total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_SME_SUBSCRIPTION_PAYMENT'
          AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
          AND isreversedflag = false

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'
                THEN interchange_amount ELSE 0  END) as total_revenue_before_vat,
            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'
                THEN interchange_amount ELSE 0  END) as total_revenue_ater_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_P2P'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true
                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_before_vat,
            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true
                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN', 'TransactionTypes_ATM_CASH_OUT_REVERSAL', 'TransactionTypes_ATM_CASH_IN_REVERSAL')
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (service_fees::float) as total_revenue_before_vat,
            (service_fees::float) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            td.amount as total_revenue_before_vat,
            td.amount as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_CREATE_VCN_FEES'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_before_vat,
            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_REDEEM_SME_INADVANCE_DEPOSIT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
)

     td.txndetailsid,
     td.transaction_createdat_utc2,
     td.walletdetailsid,
     ed.clientid,
     (CASE WHEN ed.employee_id IS NULL THEN false ELSE true END) as is_employee,
     ed.employee_id,
     td.txntype,
     td.transactionstatus,
     td.transactiondomain,
     td.interchangeaction,
     td.interchange_amount,
     td.amount,
     td.service_fees,
     td.hasservicefees,
     td.transactionreference,
     td.isreversedflag,
     ROUND(coalesce(ct.total_cost_before_vat, 0)::numeric, 2) as total_cost_before_vat,
     ROUND(coalesce(rt.total_revenue_before_vat, 0)::numeric, 2) as total_revenue_before_vat,
     ROUND(coalesce(ct.total_cost_after_vat, 0)::numeric, 2) as total_cost_after_vat,
     ROUND(coalesce(rt.total_revenue_after_vat, 0)::numeric, 2) as total_revenue_after_vat,
     ROUND(SUM(COALESCE(rt.total_revenue_before_vat, 0) - COALESCE(ct.total_cost_before_vat, 0))::numeric, 2) as total_profit

FROM "dbt"."dbt-dimensions"."transactions_dimension" td
LEFT JOIN "dbt"."dbt-dimensions"."wallets_dimension" wd ON td.walletdetailsid = wd.walletid
LEFT JOIN "dbt"."dbt-dimensions"."clients_dimension" cd ON td.clientdetails ->> 'clientId' = cd.clientid
LEFT JOIN "dbt"."dbt-dimensions"."employees_dimension" ed ON wd.walletnumber = ed.employee_mobile AND
            td.transaction_createdat_utc2 between employee_createdat and employee_deletedat
LEFT join cost_table ct on td.txndetailsid = ct.txndetailsid
LEFT join revenue_table rt on td.txndetailsid = rt.txndetailsid
GROUP BY td.txndetailsid, td.transaction_createdat_utc2, td.walletdetailsid, ed.clientid, ed.employee_id, td.txntype, td.transactionstatus, td.transactiondomain, td.interchangeaction, td.interchange_amount, td.amount, td.service_fees, td.hasservicefees, td.transactionreference, td.isreversedflag,
         ct.total_cost_before_vat, rt.total_revenue_before_vat, ct.total_cost_after_vat, rt.total_revenue_after_vat
  );
  
[0m13:43:02.748571 [debug] [Thread-1  ]: Postgres adapter: Postgres error: syntax error at or near "td"
LINE 289:      td.txndetailsid,
               ^

[0m13:43:02.749498 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: ROLLBACK
[0m13:43:02.753495 [debug] [Thread-1  ]: Timing info for model.fact_dimensions.transactions_fact (execute): 13:43:02.641882 => 13:43:02.752608
[0m13:43:02.753495 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: Close
[0m13:43:02.866845 [debug] [Thread-1  ]: Database Error in model transactions_fact (models\transactions_fact.sql)
  syntax error at or near "td"
  LINE 289:      td.txndetailsid,
                 ^
  compiled Code at target\run\fact_dimensions\models\transactions_fact.sql
[0m13:43:02.867847 [error] [Thread-1  ]: 1 of 1 ERROR creating sql table model dbt-facts.transactions_fact ...................................................... [[31mERROR[0m in 0.25s]
[0m13:43:02.868935 [debug] [Thread-1  ]: Finished running node model.fact_dimensions.transactions_fact
[0m13:43:02.871845 [debug] [MainThread]: Using postgres connection "master"
[0m13:43:02.871845 [debug] [MainThread]: On master: BEGIN
[0m13:43:02.872842 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m13:43:03.000461 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m13:43:03.001475 [debug] [MainThread]: On master: COMMIT
[0m13:43:03.002464 [debug] [MainThread]: Using postgres connection "master"
[0m13:43:03.003465 [debug] [MainThread]: On master: COMMIT
[0m13:43:03.074833 [debug] [MainThread]: SQL status: COMMIT in 0.0 seconds
[0m13:43:03.077158 [debug] [MainThread]: On master: Close
[0m13:43:03.079136 [debug] [MainThread]: Connection 'master' was properly closed.
[0m13:43:03.079754 [debug] [MainThread]: Connection 'list_dbt' was properly closed.
[0m13:43:03.080370 [debug] [MainThread]: Connection 'list_dbt_dbt-facts' was properly closed.
[0m13:43:03.080987 [debug] [MainThread]: Connection 'model.fact_dimensions.transactions_fact' was properly closed.
[0m13:43:03.081559 [info ] [MainThread]: 
[0m13:43:03.081559 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.86 seconds (0.86s).
[0m13:43:03.082567 [debug] [MainThread]: Command end result
[0m13:43:03.092581 [info ] [MainThread]: 
[0m13:43:03.092581 [info ] [MainThread]: [31mCompleted with 1 error and 0 warnings:[0m
[0m13:43:03.093634 [info ] [MainThread]: 
[0m13:43:03.093634 [error] [MainThread]:   Database Error in model transactions_fact (models\transactions_fact.sql)
  syntax error at or near "td"
  LINE 289:      td.txndetailsid,
                 ^
  compiled Code at target\run\fact_dimensions\models\transactions_fact.sql
[0m13:43:03.094580 [info ] [MainThread]: 
[0m13:43:03.094580 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1
[0m13:43:03.095566 [debug] [MainThread]: Command `dbt run` failed at 13:43:03.095566 after 2.14 seconds
[0m13:43:03.095566 [debug] [MainThread]: Flushing usage events


============================== 13:44:16.002291 | 4d2724af-44db-45da-a639-2d608e56862e ==============================
[0m13:44:16.002291 [info ] [MainThread]: Running with dbt=1.7.6
[0m13:44:16.006291 [debug] [MainThread]: running dbt with arguments {'printer_width': '120', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': 'D:\\dbt-folder\\fact_dimensions\\logs', 'profiles_dir': 'D:\\dbt-folder\\fact_dimensions', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'invocation_command': 'dbt run', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'False'}
[0m13:44:16.243613 [info ] [MainThread]: Registered adapter: postgres=1.7.5
[0m13:44:16.253626 [debug] [MainThread]: checksum: d62e513342251256fdf8c77c78ccf3e0bf76720e6e4e8384a98b7479399def9a, vars: {}, profile: , target: , version: 1.7.6
[0m13:44:16.323702 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m13:44:16.324704 [debug] [MainThread]: Partial parsing: updated file: fact_dimensions://models\transactions_fact.sql
[0m13:44:16.440933 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.transactions_fact.example
[0m13:44:16.456975 [info ] [MainThread]: Found 1 model, 11 sources, 0 exposures, 0 metrics, 401 macros, 0 groups, 0 semantic models
[0m13:44:16.458032 [info ] [MainThread]: 
[0m13:44:16.459922 [debug] [MainThread]: Acquiring new postgres connection 'master'
[0m13:44:16.462922 [debug] [ThreadPool]: Acquiring new postgres connection 'list_dbt'
[0m13:44:16.526922 [debug] [ThreadPool]: Using postgres connection "list_dbt"
[0m13:44:16.526922 [debug] [ThreadPool]: On list_dbt: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "list_dbt"} */

    select distinct nspname from pg_namespace
  
[0m13:44:16.527923 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m13:44:16.617195 [debug] [ThreadPool]: SQL status: SELECT 8 in 0.0 seconds
[0m13:44:16.619199 [debug] [ThreadPool]: On list_dbt: Close
[0m13:44:16.621270 [debug] [ThreadPool]: Acquiring new postgres connection 'list_dbt_dbt-facts'
[0m13:44:16.626197 [debug] [ThreadPool]: Using postgres connection "list_dbt_dbt-facts"
[0m13:44:16.627196 [debug] [ThreadPool]: On list_dbt_dbt-facts: BEGIN
[0m13:44:16.627196 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m13:44:16.700446 [debug] [ThreadPool]: SQL status: BEGIN in 0.0 seconds
[0m13:44:16.701463 [debug] [ThreadPool]: Using postgres connection "list_dbt_dbt-facts"
[0m13:44:16.702413 [debug] [ThreadPool]: On list_dbt_dbt-facts: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "list_dbt_dbt-facts"} */
select
      'dbt' as database,
      tablename as name,
      schemaname as schema,
      'table' as type
    from pg_tables
    where schemaname ilike 'dbt-facts'
    union all
    select
      'dbt' as database,
      viewname as name,
      schemaname as schema,
      'view' as type
    from pg_views
    where schemaname ilike 'dbt-facts'
    union all
    select
      'dbt' as database,
      matviewname as name,
      schemaname as schema,
      'materialized_view' as type
    from pg_matviews
    where schemaname ilike 'dbt-facts'
  
[0m13:44:16.715984 [debug] [ThreadPool]: SQL status: SELECT 1 in 0.0 seconds
[0m13:44:16.718292 [debug] [ThreadPool]: On list_dbt_dbt-facts: ROLLBACK
[0m13:44:16.722560 [debug] [ThreadPool]: On list_dbt_dbt-facts: Close
[0m13:44:16.726613 [debug] [MainThread]: Using postgres connection "master"
[0m13:44:16.726613 [debug] [MainThread]: On master: BEGIN
[0m13:44:16.726613 [debug] [MainThread]: Opening a new connection, currently in state init
[0m13:44:16.819094 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m13:44:16.820195 [debug] [MainThread]: Using postgres connection "master"
[0m13:44:16.820195 [debug] [MainThread]: On master: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "master"} */
with relation as (
        select
            pg_rewrite.ev_class as class,
            pg_rewrite.oid as id
        from pg_rewrite
    ),
    class as (
        select
            oid as id,
            relname as name,
            relnamespace as schema,
            relkind as kind
        from pg_class
    ),
    dependency as (
        select distinct
            pg_depend.objid as id,
            pg_depend.refobjid as ref
        from pg_depend
    ),
    schema as (
        select
            pg_namespace.oid as id,
            pg_namespace.nspname as name
        from pg_namespace
        where nspname != 'information_schema' and nspname not like 'pg\_%'
    ),
    referenced as (
        select
            relation.id AS id,
            referenced_class.name ,
            referenced_class.schema ,
            referenced_class.kind
        from relation
        join class as referenced_class on relation.class=referenced_class.id
        where referenced_class.kind in ('r', 'v', 'm')
    ),
    relationships as (
        select
            referenced.name as referenced_name,
            referenced.schema as referenced_schema_id,
            dependent_class.name as dependent_name,
            dependent_class.schema as dependent_schema_id,
            referenced.kind as kind
        from referenced
        join dependency on referenced.id=dependency.id
        join class as dependent_class on dependency.ref=dependent_class.id
        where
            (referenced.name != dependent_class.name or
             referenced.schema != dependent_class.schema)
    )

    select
        referenced_schema.name as referenced_schema,
        relationships.referenced_name as referenced_name,
        dependent_schema.name as dependent_schema,
        relationships.dependent_name as dependent_name
    from relationships
    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id
    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id
    group by referenced_schema, referenced_name, dependent_schema, dependent_name
    order by referenced_schema, referenced_name, dependent_schema, dependent_name;
[0m13:44:16.884979 [debug] [MainThread]: SQL status: SELECT 0 in 0.0 seconds
[0m13:44:16.886977 [debug] [MainThread]: On master: ROLLBACK
[0m13:44:16.892520 [debug] [MainThread]: Using postgres connection "master"
[0m13:44:16.893533 [debug] [MainThread]: On master: BEGIN
[0m13:44:16.900622 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m13:44:16.901612 [debug] [MainThread]: On master: COMMIT
[0m13:44:16.950179 [debug] [MainThread]: Using postgres connection "master"
[0m13:44:16.951177 [debug] [MainThread]: On master: COMMIT
[0m13:44:16.955178 [debug] [MainThread]: SQL status: COMMIT in 0.0 seconds
[0m13:44:16.955178 [debug] [MainThread]: On master: Close
[0m13:44:16.956285 [info ] [MainThread]: Concurrency: 1 threads (target='dev')
[0m13:44:16.956285 [info ] [MainThread]: 
[0m13:44:16.960275 [debug] [Thread-1  ]: Began running node model.fact_dimensions.transactions_fact
[0m13:44:16.960275 [info ] [Thread-1  ]: 1 of 1 START sql table model dbt-facts.transactions_fact ............................................................... [RUN]
[0m13:44:16.961176 [debug] [Thread-1  ]: Acquiring new postgres connection 'model.fact_dimensions.transactions_fact'
[0m13:44:16.962176 [debug] [Thread-1  ]: Began compiling node model.fact_dimensions.transactions_fact
[0m13:44:16.976229 [debug] [Thread-1  ]: Writing injected SQL for node "model.fact_dimensions.transactions_fact"
[0m13:44:16.978188 [debug] [Thread-1  ]: Timing info for model.fact_dimensions.transactions_fact (compile): 13:44:16.962176 => 13:44:16.977276
[0m13:44:16.979176 [debug] [Thread-1  ]: Began executing node model.fact_dimensions.transactions_fact
[0m13:44:17.014288 [debug] [Thread-1  ]: Writing runtime sql for node "model.fact_dimensions.transactions_fact"
[0m13:44:17.019180 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m13:44:17.020176 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: BEGIN
[0m13:44:17.020176 [debug] [Thread-1  ]: Opening a new connection, currently in state init
[0m13:44:17.105788 [debug] [Thread-1  ]: SQL status: BEGIN in 0.0 seconds
[0m13:44:17.106792 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m13:44:17.106792 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "node_id": "model.fact_dimensions.transactions_fact"} */

  
    

  create  table "dbt"."dbt-facts"."transactions_fact__dbt_tmp"
  
  
    as
  
  (
    -- models/transactions_fact.sql



WITH cost_table AS (
         SELECT 
             td.*,
             mc.amount                                      as meeza_processing_fees,
             0                                              AS corepay_fees,
             CAST(mc.amount AS DECIMAL(10, 2))              as total_fees_cost_before_vat,
             CAST(mc.vat * mc.amount AS DECIMAL(10, 2))     as total_fees_cost_after_vat,
             0                                              AS employee_discount,
             0                                              AS transaction_discount,
             0                                              AS discount,
             null                                           AS entity,
             null                                           AS protocol,
             0                                              as price,
             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.amount AS DECIMAL(10, 2))
                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_before_vat,
             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.vat * mc.amount AS DECIMAL(10, 2))
                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        JOIN "dbt"."public"."meeza_cost" mc on td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain
        WHERE txntype in
                ('TransactionTypes_RECEIVE_P2P', 'TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN',
                 'TransactionTypes_RECEIVE_AGENT_CASH_IN', 'TransactionTypes_RECEIVE_DEPOSIT',
                 'TransactionTypes_RECEIVE_EXPAYNET')
        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT 
            td.*,
            0                AS meeza_processing_fees,
            0                AS corepay_fees,
            0                AS total_fees_cost_before_vat,
            0                AS total_fees_cost_after_vat,
            0                AS employee_discount,
            0                AS transaction_discount,
            0                AS discount,
            null             AS entity,
            null             AS protocol,
            0                as price,
            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2
              ELSE 0 END) as total_cost_before_vat,
            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2
              ELSE 0 END) as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')
        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
        
        UNION
        
        SELECT 
            td.*,
            0                                                                    AS meeza_processing_fees,
            COALESCE(bt.corepayfees::float, 0)                                   as corepay_fees,
            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_before_vat,
            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_after_vat,
            0                                                                    AS employee_discount,
            0                                                                    AS transaction_discount,
            COALESCE(bp.discount::float, 0)                                      as discount,
            tp.entity,
            tp.protocol,
            tp.price,
            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_before_vat,
            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."bankpaymenttransactions" bt ON td.txndetailsid = bt.originaltransactionid
        LEFT JOIN "dbt"."axis_sme"."bankpayments" bp ON bt.bankpaymentid = bp.bankpaymentid
        LEFT JOIN "dbt"."public"."txn_proc_cost_table" tp ON td.txntype = tp.transactiontype
              AND td.transaction_createdat_utc2 between tp.createdat and COALESCE(tp.endedat, now())

        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION
        
        SELECT 
            td.*,
            mc.amount                                                                    meeza_processing_fees,
            0                                                                         as corepay_fees,
            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_fees_cost_before_vat,
            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_fees_cost_after_vat,
            coalesce(employeefeesdiscount::float, 0)                                  as employee_discount,
            coalesce(transactionfeesdiscount::float, 0)                               as transaction_discount,
            coalesce(employeefeesdiscount::float + transactionfeesdiscount::float, 0) as discount,
            NULL                                                                      as entity,
            NULL                                                                      as protocol,
            NULL                                                                      as price,
            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +
            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_cost_before_vat,
            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +
            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."public"."meeza_cost" mc ON td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain
        LEFT JOIN "dbt"."dbt-dimensions"."transactions_dimension" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
),


revenue_table AS (
        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            coalesce(bp.vat::float, 0) as bank_vat,
            coalesce(bp.vat::float, 0) as total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            coalesce(bt.axisfees_aibyte_transform::float, 0) as bank_fees,
            coalesce(bt.axisfees_aibyte_transform::float, 0) as total_revenue_before_vat,
            coalesce(bt.axisfees_aibyte_transform::float, 0) * coalesce(bp.vat::float, 1) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."bankpaymenttransactions" bt ON td.txndetailsid = bt.originaltransactionid
        LEFT JOIN "dbt"."axis_sme"."bankpayments" bp ON bt.bankpaymentid = bp.bankpaymentid
        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT' AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE') AND isreversedflag = false

        UNION

        SELECT
            td.*,
            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,
            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,
            0 AS bank_vat,
            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,
            coalesce(employeefees::float, 0) as employee_fees,
            coalesce(fees_aibyte_transform::float, 0) as transaction_fees,
            0 AS bank_fees,
            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,
            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'
                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,
            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,
            0 AS bank_vat,
            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,
            employeefees::float as employee_fees,
            fees_aibyte_transform::float as transaction_fees,
            0 AS bank_fees,
            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,
            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat


        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_PAYROLL_DEPOSIT'
                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            coalesce(td.amount::float, 0) AS total_revenue_before_vat,
            coalesce(td.amount::float, 0) AS total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_SME_SUBSCRIPTION_PAYMENT'
          AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
          AND isreversedflag = false

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'
                THEN interchange_amount ELSE 0  END) as total_revenue_before_vat,
            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'
                THEN interchange_amount ELSE 0  END) as total_revenue_ater_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_P2P'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true
                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_before_vat,
            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true
                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN', 'TransactionTypes_ATM_CASH_OUT_REVERSAL', 'TransactionTypes_ATM_CASH_IN_REVERSAL')
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (service_fees::float) as total_revenue_before_vat,
            (service_fees::float) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            td.amount as total_revenue_before_vat,
            td.amount as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_CREATE_VCN_FEES'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_before_vat,
            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_REDEEM_SME_INADVANCE_DEPOSIT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
)
SELECT
     td.txndetailsid,
     td.transaction_createdat_utc2,
     td.walletdetailsid,
     ed.clientid,
     (CASE WHEN ed.employee_id IS NULL THEN false ELSE true END) as is_employee,
     ed.employee_id,
     td.txntype,
     td.transactionstatus,
     td.transactiondomain,
     td.interchangeaction,
     td.interchange_amount,
     td.amount,
     td.service_fees,
     td.hasservicefees,
     td.transactionreference,
     td.isreversedflag,
     ROUND(coalesce(ct.total_cost_before_vat, 0)::numeric, 2) as total_cost_before_vat,
     ROUND(coalesce(rt.total_revenue_before_vat, 0)::numeric, 2) as total_revenue_before_vat,
     ROUND(coalesce(ct.total_cost_after_vat, 0)::numeric, 2) as total_cost_after_vat,
     ROUND(coalesce(rt.total_revenue_after_vat, 0)::numeric, 2) as total_revenue_after_vat,
     ROUND(SUM(COALESCE(rt.total_revenue_before_vat, 0) - COALESCE(ct.total_cost_before_vat, 0))::numeric, 2) as total_profit

FROM "dbt"."dbt-dimensions"."transactions_dimension" td
LEFT JOIN "dbt"."dbt-dimensions"."wallets_dimension" wd ON td.walletdetailsid = wd.walletid
LEFT JOIN "dbt"."dbt-dimensions"."clients_dimension" cd ON td.clientdetails ->> 'clientId' = cd.clientid
LEFT JOIN "dbt"."dbt-dimensions"."employees_dimension" ed ON wd.walletnumber = ed.employee_mobile AND
            td.transaction_createdat_utc2 between employee_createdat and employee_deletedat
LEFT join cost_table ct on td.txndetailsid = ct.txndetailsid
LEFT join revenue_table rt on td.txndetailsid = rt.txndetailsid
GROUP BY td.txndetailsid, td.transaction_createdat_utc2, td.walletdetailsid, ed.clientid, ed.employee_id, td.txntype, td.transactionstatus, td.transactiondomain, td.interchangeaction, td.interchange_amount, td.amount, td.service_fees, td.hasservicefees, td.transactionreference, td.isreversedflag,
         ct.total_cost_before_vat, rt.total_revenue_before_vat, ct.total_cost_after_vat, rt.total_revenue_after_vat
  );
  
[0m13:44:17.127854 [debug] [Thread-1  ]: Postgres adapter: Postgres error: column dt.wallettransactionreference does not exist
LINE 112: ...ctions_dimension" dt ON td.transactionreference = dt.wallett...
                                                               ^

[0m13:44:17.127854 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: ROLLBACK
[0m13:44:17.146875 [debug] [Thread-1  ]: Timing info for model.fact_dimensions.transactions_fact (execute): 13:44:16.979176 => 13:44:17.145853
[0m13:44:17.146875 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: Close
[0m13:44:17.152854 [debug] [Thread-1  ]: Database Error in model transactions_fact (models\transactions_fact.sql)
  column dt.wallettransactionreference does not exist
  LINE 112: ...ctions_dimension" dt ON td.transactionreference = dt.wallett...
                                                                 ^
  compiled Code at target\run\fact_dimensions\models\transactions_fact.sql
[0m13:44:17.153856 [error] [Thread-1  ]: 1 of 1 ERROR creating sql table model dbt-facts.transactions_fact ...................................................... [[31mERROR[0m in 0.19s]
[0m13:44:17.153856 [debug] [Thread-1  ]: Finished running node model.fact_dimensions.transactions_fact
[0m13:44:17.155858 [debug] [MainThread]: Using postgres connection "master"
[0m13:44:17.156856 [debug] [MainThread]: On master: BEGIN
[0m13:44:17.156856 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m13:44:17.239284 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m13:44:17.239284 [debug] [MainThread]: On master: COMMIT
[0m13:44:17.240282 [debug] [MainThread]: Using postgres connection "master"
[0m13:44:17.240282 [debug] [MainThread]: On master: COMMIT
[0m13:44:17.250953 [debug] [MainThread]: SQL status: COMMIT in 0.0 seconds
[0m13:44:17.252100 [debug] [MainThread]: On master: Close
[0m13:44:17.252741 [debug] [MainThread]: Connection 'master' was properly closed.
[0m13:44:17.253246 [debug] [MainThread]: Connection 'list_dbt' was properly closed.
[0m13:44:17.253376 [debug] [MainThread]: Connection 'list_dbt_dbt-facts' was properly closed.
[0m13:44:17.253880 [debug] [MainThread]: Connection 'model.fact_dimensions.transactions_fact' was properly closed.
[0m13:44:17.253990 [info ] [MainThread]: 
[0m13:44:17.254574 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.80 seconds (0.80s).
[0m13:44:17.255680 [debug] [MainThread]: Command end result
[0m13:44:17.270088 [info ] [MainThread]: 
[0m13:44:17.271318 [info ] [MainThread]: [31mCompleted with 1 error and 0 warnings:[0m
[0m13:44:17.272090 [info ] [MainThread]: 
[0m13:44:17.272855 [error] [MainThread]:   Database Error in model transactions_fact (models\transactions_fact.sql)
  column dt.wallettransactionreference does not exist
  LINE 112: ...ctions_dimension" dt ON td.transactionreference = dt.wallett...
                                                                 ^
  compiled Code at target\run\fact_dimensions\models\transactions_fact.sql
[0m13:44:17.273466 [info ] [MainThread]: 
[0m13:44:17.273972 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1
[0m13:44:17.274490 [debug] [MainThread]: Command `dbt run` failed at 13:44:17.274490 after 1.31 seconds
[0m13:44:17.275026 [debug] [MainThread]: Flushing usage events


============================== 13:47:45.992203 | 3fe31420-d11b-430b-b244-25faeb0c8d47 ==============================
[0m13:47:45.992203 [info ] [MainThread]: Running with dbt=1.7.6
[0m13:47:45.996207 [debug] [MainThread]: running dbt with arguments {'printer_width': '120', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': 'D:\\dbt-folder\\fact_dimensions', 'debug': 'False', 'warn_error': 'None', 'log_path': 'D:\\dbt-folder\\fact_dimensions\\logs', 'fail_fast': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'static_parser': 'True', 'invocation_command': 'dbt run', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'False'}
[0m13:47:46.227700 [info ] [MainThread]: Registered adapter: postgres=1.7.5
[0m13:47:46.236705 [debug] [MainThread]: checksum: d62e513342251256fdf8c77c78ccf3e0bf76720e6e4e8384a98b7479399def9a, vars: {}, profile: , target: , version: 1.7.6
[0m13:47:46.294696 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m13:47:46.295698 [debug] [MainThread]: Partial parsing: updated file: fact_dimensions://models\transactions_fact.sql
[0m13:47:46.424069 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.transactions_fact.example
[0m13:47:46.444069 [info ] [MainThread]: Found 1 model, 11 sources, 0 exposures, 0 metrics, 401 macros, 0 groups, 0 semantic models
[0m13:47:46.445082 [info ] [MainThread]: 
[0m13:47:46.446090 [debug] [MainThread]: Acquiring new postgres connection 'master'
[0m13:47:46.450075 [debug] [ThreadPool]: Acquiring new postgres connection 'list_dbt'
[0m13:47:46.513081 [debug] [ThreadPool]: Using postgres connection "list_dbt"
[0m13:47:46.515071 [debug] [ThreadPool]: On list_dbt: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "list_dbt"} */

    select distinct nspname from pg_namespace
  
[0m13:47:46.515071 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m13:47:46.558480 [debug] [ThreadPool]: SQL status: SELECT 8 in 0.0 seconds
[0m13:47:46.560548 [debug] [ThreadPool]: On list_dbt: Close
[0m13:47:46.562470 [debug] [ThreadPool]: Acquiring new postgres connection 'list_dbt_dbt-facts'
[0m13:47:46.569573 [debug] [ThreadPool]: Using postgres connection "list_dbt_dbt-facts"
[0m13:47:46.569573 [debug] [ThreadPool]: On list_dbt_dbt-facts: BEGIN
[0m13:47:46.570572 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m13:47:46.627552 [debug] [ThreadPool]: SQL status: BEGIN in 0.0 seconds
[0m13:47:46.627552 [debug] [ThreadPool]: Using postgres connection "list_dbt_dbt-facts"
[0m13:47:46.628636 [debug] [ThreadPool]: On list_dbt_dbt-facts: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "list_dbt_dbt-facts"} */
select
      'dbt' as database,
      tablename as name,
      schemaname as schema,
      'table' as type
    from pg_tables
    where schemaname ilike 'dbt-facts'
    union all
    select
      'dbt' as database,
      viewname as name,
      schemaname as schema,
      'view' as type
    from pg_views
    where schemaname ilike 'dbt-facts'
    union all
    select
      'dbt' as database,
      matviewname as name,
      schemaname as schema,
      'materialized_view' as type
    from pg_matviews
    where schemaname ilike 'dbt-facts'
  
[0m13:47:46.646554 [debug] [ThreadPool]: SQL status: SELECT 1 in 0.0 seconds
[0m13:47:46.650639 [debug] [ThreadPool]: On list_dbt_dbt-facts: ROLLBACK
[0m13:47:46.661212 [debug] [ThreadPool]: On list_dbt_dbt-facts: Close
[0m13:47:46.669303 [debug] [MainThread]: Using postgres connection "master"
[0m13:47:46.669303 [debug] [MainThread]: On master: BEGIN
[0m13:47:46.670331 [debug] [MainThread]: Opening a new connection, currently in state init
[0m13:47:46.735976 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m13:47:46.737027 [debug] [MainThread]: Using postgres connection "master"
[0m13:47:46.737027 [debug] [MainThread]: On master: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "master"} */
with relation as (
        select
            pg_rewrite.ev_class as class,
            pg_rewrite.oid as id
        from pg_rewrite
    ),
    class as (
        select
            oid as id,
            relname as name,
            relnamespace as schema,
            relkind as kind
        from pg_class
    ),
    dependency as (
        select distinct
            pg_depend.objid as id,
            pg_depend.refobjid as ref
        from pg_depend
    ),
    schema as (
        select
            pg_namespace.oid as id,
            pg_namespace.nspname as name
        from pg_namespace
        where nspname != 'information_schema' and nspname not like 'pg\_%'
    ),
    referenced as (
        select
            relation.id AS id,
            referenced_class.name ,
            referenced_class.schema ,
            referenced_class.kind
        from relation
        join class as referenced_class on relation.class=referenced_class.id
        where referenced_class.kind in ('r', 'v', 'm')
    ),
    relationships as (
        select
            referenced.name as referenced_name,
            referenced.schema as referenced_schema_id,
            dependent_class.name as dependent_name,
            dependent_class.schema as dependent_schema_id,
            referenced.kind as kind
        from referenced
        join dependency on referenced.id=dependency.id
        join class as dependent_class on dependency.ref=dependent_class.id
        where
            (referenced.name != dependent_class.name or
             referenced.schema != dependent_class.schema)
    )

    select
        referenced_schema.name as referenced_schema,
        relationships.referenced_name as referenced_name,
        dependent_schema.name as dependent_schema,
        relationships.dependent_name as dependent_name
    from relationships
    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id
    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id
    group by referenced_schema, referenced_name, dependent_schema, dependent_name
    order by referenced_schema, referenced_name, dependent_schema, dependent_name;
[0m13:47:46.818197 [debug] [MainThread]: SQL status: SELECT 0 in 0.0 seconds
[0m13:47:46.820150 [debug] [MainThread]: On master: ROLLBACK
[0m13:47:46.832135 [debug] [MainThread]: Using postgres connection "master"
[0m13:47:46.833264 [debug] [MainThread]: On master: BEGIN
[0m13:47:46.839279 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m13:47:46.840313 [debug] [MainThread]: On master: COMMIT
[0m13:47:46.841356 [debug] [MainThread]: Using postgres connection "master"
[0m13:47:46.841356 [debug] [MainThread]: On master: COMMIT
[0m13:47:46.849266 [debug] [MainThread]: SQL status: COMMIT in 0.0 seconds
[0m13:47:46.850355 [debug] [MainThread]: On master: Close
[0m13:47:46.851336 [info ] [MainThread]: Concurrency: 1 threads (target='dev')
[0m13:47:46.852364 [info ] [MainThread]: 
[0m13:47:46.855748 [debug] [Thread-1  ]: Began running node model.fact_dimensions.transactions_fact
[0m13:47:46.856774 [info ] [Thread-1  ]: 1 of 1 START sql table model dbt-facts.transactions_fact ............................................................... [RUN]
[0m13:47:46.857850 [debug] [Thread-1  ]: Acquiring new postgres connection 'model.fact_dimensions.transactions_fact'
[0m13:47:46.857850 [debug] [Thread-1  ]: Began compiling node model.fact_dimensions.transactions_fact
[0m13:47:46.869851 [debug] [Thread-1  ]: Writing injected SQL for node "model.fact_dimensions.transactions_fact"
[0m13:47:46.870839 [debug] [Thread-1  ]: Timing info for model.fact_dimensions.transactions_fact (compile): 13:47:46.857850 => 13:47:46.870839
[0m13:47:46.871845 [debug] [Thread-1  ]: Began executing node model.fact_dimensions.transactions_fact
[0m13:47:46.908387 [debug] [Thread-1  ]: Writing runtime sql for node "model.fact_dimensions.transactions_fact"
[0m13:47:46.910480 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m13:47:46.910480 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: BEGIN
[0m13:47:46.911388 [debug] [Thread-1  ]: Opening a new connection, currently in state init
[0m13:47:46.993423 [debug] [Thread-1  ]: SQL status: BEGIN in 0.0 seconds
[0m13:47:46.994412 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m13:47:46.996407 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "node_id": "model.fact_dimensions.transactions_fact"} */

  
    

  create  table "dbt"."dbt-facts"."transactions_fact__dbt_tmp"
  
  
    as
  
  (
    -- models/transactions_fact.sql



WITH cost_table AS (
         SELECT 
             td.*,
             mc.amount                                      as meeza_processing_fees,
             0                                              AS corepay_fees,
             CAST(mc.amount AS DECIMAL(10, 2))              as total_fees_cost_before_vat,
             CAST(mc.vat * mc.amount AS DECIMAL(10, 2))     as total_fees_cost_after_vat,
             0                                              AS employee_discount,
             0                                              AS transaction_discount,
             0                                              AS discount,
             null                                           AS entity,
             null                                           AS protocol,
             0                                              as price,
             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.amount AS DECIMAL(10, 2))
                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_before_vat,
             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.vat * mc.amount AS DECIMAL(10, 2))
                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        JOIN "dbt"."public"."meeza_cost" mc on td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain
        WHERE txntype in
                ('TransactionTypes_RECEIVE_P2P', 'TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN',
                 'TransactionTypes_RECEIVE_AGENT_CASH_IN', 'TransactionTypes_RECEIVE_DEPOSIT',
                 'TransactionTypes_RECEIVE_EXPAYNET')
        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT 
            td.*,
            0                AS meeza_processing_fees,
            0                AS corepay_fees,
            0                AS total_fees_cost_before_vat,
            0                AS total_fees_cost_after_vat,
            0                AS employee_discount,
            0                AS transaction_discount,
            0                AS discount,
            null             AS entity,
            null             AS protocol,
            0                as price,
            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2
              ELSE 0 END) as total_cost_before_vat,
            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2
              ELSE 0 END) as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')
        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
        
        UNION
        
        SELECT 
            td.*,
            0                                                                    AS meeza_processing_fees,
            COALESCE(bt.corepayfees::float, 0)                                   as corepay_fees,
            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_before_vat,
            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_after_vat,
            0                                                                    AS employee_discount,
            0                                                                    AS transaction_discount,
            COALESCE(bp.discount::float, 0)                                      as discount,
            tp.entity,
            tp.protocol,
            tp.price,
            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_before_vat,
            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."bankpaymenttransactions" bt ON td.txndetailsid = bt.originaltransactionid
        LEFT JOIN "dbt"."axis_sme"."bankpayments" bp ON bt.bankpaymentid = bp.bankpaymentid
        LEFT JOIN "dbt"."public"."txn_proc_cost_table" tp ON td.txntype = tp.transactiontype
              AND td.transaction_createdat_utc2 between tp.createdat and COALESCE(tp.endedat, now())

        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION
        
        SELECT 
            td.*,
            mc.amount                                                                    meeza_processing_fees,
            0                                                                         as corepay_fees,
            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_fees_cost_before_vat,
            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_fees_cost_after_vat,
            coalesce(employeefeesdiscount::float, 0)                                  as employee_discount,
            coalesce(transactionfeesdiscount::float, 0)                               as transaction_discount,
            coalesce(employeefeesdiscount::float + transactionfeesdiscount::float, 0) as discount,
            NULL                                                                      as entity,
            NULL                                                                      as protocol,
            NULL                                                                      as price,
            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +
            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_cost_before_vat,
            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +
            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."public"."meeza_cost" mc ON td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
),


revenue_table AS (
        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            coalesce(bp.vat::float, 0) as bank_vat,
            coalesce(bp.vat::float, 0) as total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            coalesce(bt.axisfees_aibyte_transform::float, 0) as bank_fees,
            coalesce(bt.axisfees_aibyte_transform::float, 0) as total_revenue_before_vat,
            coalesce(bt.axisfees_aibyte_transform::float, 0) * coalesce(bp.vat::float, 1) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."bankpaymenttransactions" bt ON td.txndetailsid = bt.originaltransactionid
        LEFT JOIN "dbt"."axis_sme"."bankpayments" bp ON bt.bankpaymentid = bp.bankpaymentid
        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT' AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE') AND isreversedflag = false

        UNION

        SELECT
            td.*,
            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,
            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,
            0 AS bank_vat,
            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,
            coalesce(employeefees::float, 0) as employee_fees,
            coalesce(fees_aibyte_transform::float, 0) as transaction_fees,
            0 AS bank_fees,
            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,
            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'
                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,
            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,
            0 AS bank_vat,
            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,
            employeefees::float as employee_fees,
            fees_aibyte_transform::float as transaction_fees,
            0 AS bank_fees,
            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,
            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat


        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_PAYROLL_DEPOSIT'
                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            coalesce(td.amount::float, 0) AS total_revenue_before_vat,
            coalesce(td.amount::float, 0) AS total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_SME_SUBSCRIPTION_PAYMENT'
          AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
          AND isreversedflag = false

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'
                THEN interchange_amount ELSE 0  END) as total_revenue_before_vat,
            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'
                THEN interchange_amount ELSE 0  END) as total_revenue_ater_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_P2P'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true
                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_before_vat,
            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true
                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN', 'TransactionTypes_ATM_CASH_OUT_REVERSAL', 'TransactionTypes_ATM_CASH_IN_REVERSAL')
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (service_fees::float) as total_revenue_before_vat,
            (service_fees::float) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            td.amount as total_revenue_before_vat,
            td.amount as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_CREATE_VCN_FEES'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_before_vat,
            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_REDEEM_SME_INADVANCE_DEPOSIT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
)
SELECT
     td.txndetailsid,
     td.transaction_createdat_utc2,
     td.walletdetailsid,
     ed.clientid,
     (CASE WHEN ed.employee_id IS NULL THEN false ELSE true END) as is_employee,
     ed.employee_id,
     td.txntype,
     td.transactionstatus,
     td.transactiondomain,
     td.interchangeaction,
     td.interchange_amount,
     td.amount,
     td.service_fees,
     td.hasservicefees,
     td.transactionreference,
     td.isreversedflag,
     ROUND(coalesce(ct.total_cost_before_vat, 0)::numeric, 2) as total_cost_before_vat,
     ROUND(coalesce(rt.total_revenue_before_vat, 0)::numeric, 2) as total_revenue_before_vat,
     ROUND(coalesce(ct.total_cost_after_vat, 0)::numeric, 2) as total_cost_after_vat,
     ROUND(coalesce(rt.total_revenue_after_vat, 0)::numeric, 2) as total_revenue_after_vat,
     ROUND(SUM(COALESCE(rt.total_revenue_before_vat, 0) - COALESCE(ct.total_cost_before_vat, 0))::numeric, 2) as total_profit

FROM "dbt"."dbt-dimensions"."transactions_dimension" td
LEFT JOIN "dbt"."dbt-dimensions"."wallets_dimension" wd ON td.walletdetailsid = wd.walletid
LEFT JOIN "dbt"."dbt-dimensions"."clients_dimension" cd ON td.clientdetails ->> 'clientId' = cd.clientid
LEFT JOIN "dbt"."dbt-dimensions"."employees_dimension" ed ON wd.walletnumber = ed.employee_mobile AND
            td.transaction_createdat_utc2 between employee_createdat and employee_deletedat
LEFT join cost_table ct on td.txndetailsid = ct.txndetailsid
LEFT join revenue_table rt on td.txndetailsid = rt.txndetailsid
GROUP BY td.txndetailsid, td.transaction_createdat_utc2, td.walletdetailsid, ed.clientid, ed.employee_id, td.txntype, td.transactionstatus, td.transactiondomain, td.interchangeaction, td.interchange_amount, td.amount, td.service_fees, td.hasservicefees, td.transactionreference, td.isreversedflag,
         ct.total_cost_before_vat, rt.total_revenue_before_vat, ct.total_cost_after_vat, rt.total_revenue_after_vat
  );
  
[0m13:47:51.145472 [debug] [Thread-1  ]: SQL status: SELECT 112268 in 4.0 seconds
[0m13:47:51.155467 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m13:47:51.155467 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "node_id": "model.fact_dimensions.transactions_fact"} */
alter table "dbt"."dbt-facts"."transactions_fact__dbt_tmp" rename to "transactions_fact"
[0m13:47:51.159853 [debug] [Thread-1  ]: SQL status: ALTER TABLE in 0.0 seconds
[0m13:47:51.175951 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: COMMIT
[0m13:47:51.176952 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m13:47:51.176952 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: COMMIT
[0m13:47:51.185456 [debug] [Thread-1  ]: SQL status: COMMIT in 0.0 seconds
[0m13:47:51.191345 [debug] [Thread-1  ]: Applying DROP to: "dbt"."dbt-facts"."transactions_fact__dbt_backup"
[0m13:47:51.194344 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m13:47:51.194344 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "node_id": "model.fact_dimensions.transactions_fact"} */
drop table if exists "dbt"."dbt-facts"."transactions_fact__dbt_backup" cascade
[0m13:47:51.198346 [debug] [Thread-1  ]: SQL status: DROP TABLE in 0.0 seconds
[0m13:47:51.200445 [debug] [Thread-1  ]: Timing info for model.fact_dimensions.transactions_fact (execute): 13:47:46.872749 => 13:47:51.200445
[0m13:47:51.200445 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: Close
[0m13:47:51.202347 [info ] [Thread-1  ]: 1 of 1 OK created sql table model dbt-facts.transactions_fact .......................................................... [[32mSELECT 112268[0m in 4.34s]
[0m13:47:51.202347 [debug] [Thread-1  ]: Finished running node model.fact_dimensions.transactions_fact
[0m13:47:51.204406 [debug] [MainThread]: Using postgres connection "master"
[0m13:47:51.204406 [debug] [MainThread]: On master: BEGIN
[0m13:47:51.205407 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m13:47:51.269933 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m13:47:51.269933 [debug] [MainThread]: On master: COMMIT
[0m13:47:51.270872 [debug] [MainThread]: Using postgres connection "master"
[0m13:47:51.270872 [debug] [MainThread]: On master: COMMIT
[0m13:47:51.278851 [debug] [MainThread]: SQL status: COMMIT in 0.0 seconds
[0m13:47:51.280854 [debug] [MainThread]: On master: Close
[0m13:47:51.284849 [debug] [MainThread]: Connection 'master' was properly closed.
[0m13:47:51.284849 [debug] [MainThread]: Connection 'list_dbt' was properly closed.
[0m13:47:51.285941 [debug] [MainThread]: Connection 'list_dbt_dbt-facts' was properly closed.
[0m13:47:51.285941 [debug] [MainThread]: Connection 'model.fact_dimensions.transactions_fact' was properly closed.
[0m13:47:51.286894 [info ] [MainThread]: 
[0m13:47:51.286894 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 4.84 seconds (4.84s).
[0m13:47:51.287855 [debug] [MainThread]: Command end result
[0m13:47:51.297950 [info ] [MainThread]: 
[0m13:47:51.298951 [info ] [MainThread]: [32mCompleted successfully[0m
[0m13:47:51.299943 [info ] [MainThread]: 
[0m13:47:51.300943 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1
[0m13:47:51.301948 [debug] [MainThread]: Command `dbt run` succeeded at 13:47:51.301948 after 5.34 seconds
[0m13:47:51.301948 [debug] [MainThread]: Flushing usage events


============================== 21:14:45.106406 | 967919e7-c511-4cc4-af8f-fbdc40a4b9dc ==============================
[0m21:14:45.106406 [info ] [MainThread]: Running with dbt=1.7.6
[0m21:14:45.111414 [debug] [MainThread]: running dbt with arguments {'printer_width': '120', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'version_check': 'True', 'log_path': 'D:\\dbt-folder\\fact_dimensions\\logs', 'profiles_dir': 'D:\\dbt-folder\\fact_dimensions', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt run', 'log_format': 'default', 'introspect': 'True', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'False'}
[0m21:14:45.399654 [info ] [MainThread]: Registered adapter: postgres=1.7.5
[0m21:14:45.407758 [debug] [MainThread]: checksum: d62e513342251256fdf8c77c78ccf3e0bf76720e6e4e8384a98b7479399def9a, vars: {}, profile: , target: , version: 1.7.6
[0m21:14:45.506226 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 2 files changed.
[0m21:14:45.507237 [debug] [MainThread]: Partial parsing: updated file: fact_dimensions://models\sources.yml
[0m21:14:45.507237 [debug] [MainThread]: Partial parsing: updated file: fact_dimensions://models\transactions_fact.sql
[0m21:14:45.789974 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.transactions_fact.example
[0m21:14:45.806387 [info ] [MainThread]: Found 1 model, 12 sources, 0 exposures, 0 metrics, 401 macros, 0 groups, 0 semantic models
[0m21:14:45.808377 [info ] [MainThread]: 
[0m21:14:45.809378 [debug] [MainThread]: Acquiring new postgres connection 'master'
[0m21:14:45.811396 [debug] [ThreadPool]: Acquiring new postgres connection 'list_dbt'
[0m21:14:45.821396 [debug] [ThreadPool]: Using postgres connection "list_dbt"
[0m21:14:45.822374 [debug] [ThreadPool]: On list_dbt: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "list_dbt"} */

    select distinct nspname from pg_namespace
  
[0m21:14:45.822374 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m21:14:45.872814 [debug] [ThreadPool]: SQL status: SELECT 9 in 0.0 seconds
[0m21:14:45.876811 [debug] [ThreadPool]: On list_dbt: Close
[0m21:14:45.880114 [debug] [ThreadPool]: Acquiring new postgres connection 'list_dbt_dbt-facts'
[0m21:14:45.891127 [debug] [ThreadPool]: Using postgres connection "list_dbt_dbt-facts"
[0m21:14:45.891127 [debug] [ThreadPool]: On list_dbt_dbt-facts: BEGIN
[0m21:14:45.891127 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m21:14:45.959914 [debug] [ThreadPool]: SQL status: BEGIN in 0.0 seconds
[0m21:14:45.961024 [debug] [ThreadPool]: Using postgres connection "list_dbt_dbt-facts"
[0m21:14:45.961024 [debug] [ThreadPool]: On list_dbt_dbt-facts: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "list_dbt_dbt-facts"} */
select
      'dbt' as database,
      tablename as name,
      schemaname as schema,
      'table' as type
    from pg_tables
    where schemaname ilike 'dbt-facts'
    union all
    select
      'dbt' as database,
      viewname as name,
      schemaname as schema,
      'view' as type
    from pg_views
    where schemaname ilike 'dbt-facts'
    union all
    select
      'dbt' as database,
      matviewname as name,
      schemaname as schema,
      'materialized_view' as type
    from pg_matviews
    where schemaname ilike 'dbt-facts'
  
[0m21:14:45.971042 [debug] [ThreadPool]: SQL status: SELECT 2 in 0.0 seconds
[0m21:14:45.974145 [debug] [ThreadPool]: On list_dbt_dbt-facts: ROLLBACK
[0m21:14:45.979116 [debug] [ThreadPool]: On list_dbt_dbt-facts: Close
[0m21:14:45.986390 [debug] [MainThread]: Using postgres connection "master"
[0m21:14:45.986390 [debug] [MainThread]: On master: BEGIN
[0m21:14:45.987391 [debug] [MainThread]: Opening a new connection, currently in state init
[0m21:14:46.039723 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m21:14:46.039723 [debug] [MainThread]: Using postgres connection "master"
[0m21:14:46.040701 [debug] [MainThread]: On master: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "master"} */
with relation as (
        select
            pg_rewrite.ev_class as class,
            pg_rewrite.oid as id
        from pg_rewrite
    ),
    class as (
        select
            oid as id,
            relname as name,
            relnamespace as schema,
            relkind as kind
        from pg_class
    ),
    dependency as (
        select distinct
            pg_depend.objid as id,
            pg_depend.refobjid as ref
        from pg_depend
    ),
    schema as (
        select
            pg_namespace.oid as id,
            pg_namespace.nspname as name
        from pg_namespace
        where nspname != 'information_schema' and nspname not like 'pg\_%'
    ),
    referenced as (
        select
            relation.id AS id,
            referenced_class.name ,
            referenced_class.schema ,
            referenced_class.kind
        from relation
        join class as referenced_class on relation.class=referenced_class.id
        where referenced_class.kind in ('r', 'v', 'm')
    ),
    relationships as (
        select
            referenced.name as referenced_name,
            referenced.schema as referenced_schema_id,
            dependent_class.name as dependent_name,
            dependent_class.schema as dependent_schema_id,
            referenced.kind as kind
        from referenced
        join dependency on referenced.id=dependency.id
        join class as dependent_class on dependency.ref=dependent_class.id
        where
            (referenced.name != dependent_class.name or
             referenced.schema != dependent_class.schema)
    )

    select
        referenced_schema.name as referenced_schema,
        relationships.referenced_name as referenced_name,
        dependent_schema.name as dependent_schema,
        relationships.dependent_name as dependent_name
    from relationships
    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id
    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id
    group by referenced_schema, referenced_name, dependent_schema, dependent_name
    order by referenced_schema, referenced_name, dependent_schema, dependent_name;
[0m21:14:46.106166 [debug] [MainThread]: SQL status: SELECT 0 in 0.0 seconds
[0m21:14:46.108164 [debug] [MainThread]: On master: ROLLBACK
[0m21:14:46.112136 [debug] [MainThread]: Using postgres connection "master"
[0m21:14:46.113130 [debug] [MainThread]: On master: BEGIN
[0m21:14:46.120046 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m21:14:46.121045 [debug] [MainThread]: On master: COMMIT
[0m21:14:46.121045 [debug] [MainThread]: Using postgres connection "master"
[0m21:14:46.122046 [debug] [MainThread]: On master: COMMIT
[0m21:14:46.125151 [debug] [MainThread]: SQL status: COMMIT in 0.0 seconds
[0m21:14:46.126127 [debug] [MainThread]: On master: Close
[0m21:14:46.127124 [info ] [MainThread]: Concurrency: 1 threads (target='dev')
[0m21:14:46.127124 [info ] [MainThread]: 
[0m21:14:46.130394 [debug] [Thread-1  ]: Began running node model.fact_dimensions.transactions_fact
[0m21:14:46.130394 [info ] [Thread-1  ]: 1 of 1 START sql table model dbt-facts.transactions_fact ............................................................... [RUN]
[0m21:14:46.131486 [debug] [Thread-1  ]: Acquiring new postgres connection 'model.fact_dimensions.transactions_fact'
[0m21:14:46.132476 [debug] [Thread-1  ]: Began compiling node model.fact_dimensions.transactions_fact
[0m21:14:46.145502 [debug] [Thread-1  ]: Writing injected SQL for node "model.fact_dimensions.transactions_fact"
[0m21:14:46.147400 [debug] [Thread-1  ]: Timing info for model.fact_dimensions.transactions_fact (compile): 21:14:46.132476 => 21:14:46.146488
[0m21:14:46.147400 [debug] [Thread-1  ]: Began executing node model.fact_dimensions.transactions_fact
[0m21:14:46.181500 [debug] [Thread-1  ]: Writing runtime sql for node "model.fact_dimensions.transactions_fact"
[0m21:14:46.183500 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m21:14:46.184395 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: BEGIN
[0m21:14:46.185409 [debug] [Thread-1  ]: Opening a new connection, currently in state init
[0m21:14:46.219412 [debug] [Thread-1  ]: SQL status: BEGIN in 0.0 seconds
[0m21:14:46.220410 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m21:14:46.221513 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "node_id": "model.fact_dimensions.transactions_fact"} */

  
    

  create  table "dbt"."dbt-facts"."transactions_fact__dbt_tmp"
  
  
    as
  
  (
    -- models/transactions_fact.sql



WITH cost_table AS (
         SELECT 
             td.*,
             mc.amount                                      as meeza_processing_fees,
             0                                              AS corepay_fees,
             CAST(mc.amount AS DECIMAL(10, 2))              as total_fees_cost_before_vat,
             CAST(mc.vat * mc.amount AS DECIMAL(10, 2))     as total_fees_cost_after_vat,
             0                                              AS employee_discount,
             0                                              AS transaction_discount,
             0                                              AS discount,
             null                                           AS entity,
             null                                           AS protocol,
             0                                              as price,
             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.amount AS DECIMAL(10, 2))
                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_before_vat,
             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.vat * mc.amount AS DECIMAL(10, 2))
                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        JOIN "dbt"."public"."meeza_cost" mc on td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain
        WHERE txntype in
                ('TransactionTypes_RECEIVE_P2P', 'TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN',
                 'TransactionTypes_RECEIVE_AGENT_CASH_IN', 'TransactionTypes_RECEIVE_DEPOSIT',
                 'TransactionTypes_RECEIVE_EXPAYNET')
        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT 
            td.*,
            0                AS meeza_processing_fees,
            0                AS corepay_fees,
            0                AS total_fees_cost_before_vat,
            0                AS total_fees_cost_after_vat,
            0                AS employee_discount,
            0                AS transaction_discount,
            0                AS discount,
            null             AS entity,
            null             AS protocol,
            0                as price,
            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2
              ELSE 0 END) as total_cost_before_vat,
            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2
              ELSE 0 END) as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')
        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
        
        UNION
        
        SELECT 
            td.*,
            0                                                                    AS meeza_processing_fees,
            COALESCE(bt.corepayfees::float, 0)                                   as corepay_fees,
            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_before_vat,
            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_after_vat,
            0                                                                    AS employee_discount,
            0                                                                    AS transaction_discount,
            COALESCE(bp.discount::float, 0)                                      as discount,
            tp.entity,
            tp.protocol,
            tp.price,
            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_before_vat,
            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."bankpaymenttransactions" bt ON td.txndetailsid = bt.originaltransactionid
        LEFT JOIN "dbt"."axis_sme"."bankpayments" bp ON bt.bankpaymentid = bp.bankpaymentid
        LEFT JOIN "dbt"."public"."txn_proc_cost_table" tp ON td.txntype = tp.transactiontype
              AND td.transaction_createdat_utc2 between tp.createdat and COALESCE(tp.endedat, now())

        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION
        
        SELECT 
            td.*,
            mc.amount                                                                    meeza_processing_fees,
            0                                                                         as corepay_fees,
            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_fees_cost_before_vat,
            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_fees_cost_after_vat,
            coalesce(employeefeesdiscount::float, 0)                                  as employee_discount,
            coalesce(transactionfeesdiscount::float, 0)                               as transaction_discount,
            coalesce(employeefeesdiscount::float + transactionfeesdiscount::float, 0) as discount,
            NULL                                                                      as entity,
            NULL                                                                      as protocol,
            NULL                                                                      as price,
            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +
            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_cost_before_vat,
            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +
            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."public"."meeza_cost" mc ON td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
),


revenue_table AS (
        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            coalesce(bp.vat::float, 0) as bank_vat,
            coalesce(bp.vat::float, 0) as total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            coalesce(bt.axisfees_aibyte_transform::float, 0) as bank_fees,
            coalesce(bt.axisfees_aibyte_transform::float, 0) as total_revenue_before_vat,
            coalesce(bt.axisfees_aibyte_transform::float, 0) * coalesce(bp.vat::float, 1) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."bankpaymenttransactions" bt ON td.txndetailsid = bt.originaltransactionid
        LEFT JOIN "dbt"."axis_sme"."bankpayments" bp ON bt.bankpaymentid = bp.bankpaymentid
        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT' AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE') AND isreversedflag = false

        UNION

        SELECT
            td.*,
            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,
            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,
            0 AS bank_vat,
            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,
            coalesce(employeefees::float, 0) as employee_fees,
            coalesce(fees_aibyte_transform::float, 0) as transaction_fees,
            0 AS bank_fees,
            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,
            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'
                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,
            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,
            0 AS bank_vat,
            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,
            employeefees::float as employee_fees,
            fees_aibyte_transform::float as transaction_fees,
            0 AS bank_fees,
            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,
            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat


        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_PAYROLL_DEPOSIT'
                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            coalesce(td.amount::float, 0) AS total_revenue_before_vat,
            coalesce(td.amount::float, 0) AS total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_SME_SUBSCRIPTION_PAYMENT'
          AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
          AND isreversedflag = false

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'
                THEN interchange_amount ELSE 0  END) as total_revenue_before_vat,
            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'
                THEN interchange_amount ELSE 0  END) as total_revenue_ater_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_P2P'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true
                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_before_vat,
            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true
                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN', 'TransactionTypes_ATM_CASH_OUT_REVERSAL', 'TransactionTypes_ATM_CASH_IN_REVERSAL')
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (service_fees::float) as total_revenue_before_vat,
            (service_fees::float) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            td.amount as total_revenue_before_vat,
            td.amount as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_CREATE_VCN_FEES'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_before_vat,
            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_REDEEM_SME_INADVANCE_DEPOSIT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
)
SELECT
    td.txndetailsid,
    td.transaction_createdat_utc2,
    td.transaction_modifiedat_utc2,
    td.walletdetailsid,
    coalesce(td.clientdetails ->> 'clientId', ed.clientid) as clientid,
    cd.clienttype,
    pd.walletprofileid,
    pd.partner_name,
    (CASE WHEN ed.employee_id IS NULL THEN false ELSE true END) as is_employee,
    ed.employee_id,
    td.txntype,
    td.transactionstatus,
    td.transactiondomain,
    td.interchangeaction,
    td.interchange_amount,
    td.amount,
    td.service_fees,
    td.hasservicefees,
    td.transactionreference,
    td.isreversedflag,
    ROUND(coalesce(ct.total_cost_before_vat, 0)::numeric, 2) as total_cost_before_vat,
    ROUND(coalesce(rt.total_revenue_before_vat, 0)::numeric, 2) as total_revenue_before_vat,
    ROUND(coalesce(ct.total_cost_after_vat, 0)::numeric, 2) as total_cost_after_vat,
    ROUND(coalesce(rt.total_revenue_after_vat, 0)::numeric, 2) as total_revenue_after_vat,
    ROUND(SUM(COALESCE(rt.total_revenue_before_vat, 0) - COALESCE(ct.total_cost_before_vat, 0))::numeric, 2) as total_profit

FROM "dbt"."dbt-dimensions"."transactions_dimension" td
LEFT JOIN "dbt"."dbt-dimensions"."wallets_dimension" wd ON td.walletdetailsid = wd.walletid
LEFT JOIN "dbt"."dbt-dimensions"."clients_dimension" cd ON td.clientdetails ->> 'clientId' = cd.clientid
LEFT JOIN "dbt"."dbt-dimensions"."employees_dimension" ed ON wd.walletnumber = ed.employee_mobile AND
            td.transaction_createdat_utc2 between employee_createdat and employee_deletedat
LEFT JOIN "dbt-dimensions".profiles_dimension pd ON wd.profileid = pd.walletprofileid AND wd.partnerid = pd.partnerid
LEFT join cost_table ct on td.txndetailsid = ct.txndetailsid
LEFT join revenue_table rt on td.txndetailsid = rt.txndetailsid
GROUP BY td.txndetailsid, td.transaction_createdat_utc2, td.walletdetailsid, ed.clientid, ed.employee_id, td.txntype, td.transactionstatus, td.transactiondomain, td.interchangeaction, td.interchange_amount, td.amount, td.service_fees, td.hasservicefees, td.transactionreference, td.isreversedflag,
         ct.total_cost_before_vat, rt.total_revenue_before_vat, ct.total_cost_after_vat, rt.total_revenue_after_vat
  );
  
[0m21:14:46.269436 [debug] [Thread-1  ]: Postgres adapter: Postgres error: column "td.transaction_modifiedat_utc2" must appear in the GROUP BY clause or be used in an aggregate function
LINE 291:     td.transaction_modifiedat_utc2,
              ^

[0m21:14:46.270435 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: ROLLBACK
[0m21:14:46.277432 [debug] [Thread-1  ]: Timing info for model.fact_dimensions.transactions_fact (execute): 21:14:46.147400 => 21:14:46.277432
[0m21:14:46.278433 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: Close
[0m21:14:46.410901 [debug] [Thread-1  ]: Database Error in model transactions_fact (models\transactions_fact.sql)
  column "td.transaction_modifiedat_utc2" must appear in the GROUP BY clause or be used in an aggregate function
  LINE 291:     td.transaction_modifiedat_utc2,
                ^
  compiled Code at target\run\fact_dimensions\models\transactions_fact.sql
[0m21:14:46.413892 [error] [Thread-1  ]: 1 of 1 ERROR creating sql table model dbt-facts.transactions_fact ...................................................... [[31mERROR[0m in 0.28s]
[0m21:14:46.414918 [debug] [Thread-1  ]: Finished running node model.fact_dimensions.transactions_fact
[0m21:14:46.416814 [debug] [MainThread]: Using postgres connection "master"
[0m21:14:46.418126 [debug] [MainThread]: On master: BEGIN
[0m21:14:46.419138 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m21:14:46.454135 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m21:14:46.455136 [debug] [MainThread]: On master: COMMIT
[0m21:14:46.455136 [debug] [MainThread]: Using postgres connection "master"
[0m21:14:46.456166 [debug] [MainThread]: On master: COMMIT
[0m21:14:46.459647 [debug] [MainThread]: SQL status: COMMIT in 0.0 seconds
[0m21:14:46.459647 [debug] [MainThread]: On master: Close
[0m21:14:46.460765 [debug] [MainThread]: Connection 'master' was properly closed.
[0m21:14:46.460765 [debug] [MainThread]: Connection 'list_dbt' was properly closed.
[0m21:14:46.461747 [debug] [MainThread]: Connection 'list_dbt_dbt-facts' was properly closed.
[0m21:14:46.461747 [debug] [MainThread]: Connection 'model.fact_dimensions.transactions_fact' was properly closed.
[0m21:14:46.461747 [info ] [MainThread]: 
[0m21:14:46.462701 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.65 seconds (0.65s).
[0m21:14:46.462701 [debug] [MainThread]: Command end result
[0m21:14:46.473701 [info ] [MainThread]: 
[0m21:14:46.474756 [info ] [MainThread]: [31mCompleted with 1 error and 0 warnings:[0m
[0m21:14:46.474756 [info ] [MainThread]: 
[0m21:14:46.475656 [error] [MainThread]:   Database Error in model transactions_fact (models\transactions_fact.sql)
  column "td.transaction_modifiedat_utc2" must appear in the GROUP BY clause or be used in an aggregate function
  LINE 291:     td.transaction_modifiedat_utc2,
                ^
  compiled Code at target\run\fact_dimensions\models\transactions_fact.sql
[0m21:14:46.475656 [info ] [MainThread]: 
[0m21:14:46.475656 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1
[0m21:14:46.476656 [debug] [MainThread]: Command `dbt run` failed at 21:14:46.476656 after 1.41 seconds
[0m21:14:46.476656 [debug] [MainThread]: Flushing usage events


============================== 21:15:28.288928 | 35656a83-68fd-4a39-8365-44cdcd73fb87 ==============================
[0m21:15:28.288928 [info ] [MainThread]: Running with dbt=1.7.6
[0m21:15:28.295944 [debug] [MainThread]: running dbt with arguments {'printer_width': '120', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'fail_fast': 'False', 'log_path': 'D:\\dbt-folder\\fact_dimensions\\logs', 'profiles_dir': 'D:\\dbt-folder\\fact_dimensions', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'static_parser': 'True', 'introspect': 'True', 'invocation_command': 'dbt run', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'False'}
[0m21:15:28.538699 [info ] [MainThread]: Registered adapter: postgres=1.7.5
[0m21:15:28.549631 [debug] [MainThread]: checksum: d62e513342251256fdf8c77c78ccf3e0bf76720e6e4e8384a98b7479399def9a, vars: {}, profile: , target: , version: 1.7.6
[0m21:15:28.600824 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m21:15:28.601826 [debug] [MainThread]: Partial parsing: updated file: fact_dimensions://models\transactions_fact.sql
[0m21:15:28.725843 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.transactions_fact.example
[0m21:15:28.743232 [info ] [MainThread]: Found 1 model, 12 sources, 0 exposures, 0 metrics, 401 macros, 0 groups, 0 semantic models
[0m21:15:28.746237 [info ] [MainThread]: 
[0m21:15:28.747237 [debug] [MainThread]: Acquiring new postgres connection 'master'
[0m21:15:28.749233 [debug] [ThreadPool]: Acquiring new postgres connection 'list_dbt'
[0m21:15:28.806330 [debug] [ThreadPool]: Using postgres connection "list_dbt"
[0m21:15:28.807344 [debug] [ThreadPool]: On list_dbt: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "list_dbt"} */

    select distinct nspname from pg_namespace
  
[0m21:15:28.807344 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m21:15:28.851500 [debug] [ThreadPool]: SQL status: SELECT 9 in 0.0 seconds
[0m21:15:28.852561 [debug] [ThreadPool]: On list_dbt: Close
[0m21:15:28.854498 [debug] [ThreadPool]: Acquiring new postgres connection 'list_dbt_dbt-facts'
[0m21:15:28.858514 [debug] [ThreadPool]: Using postgres connection "list_dbt_dbt-facts"
[0m21:15:28.859464 [debug] [ThreadPool]: On list_dbt_dbt-facts: BEGIN
[0m21:15:28.860464 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m21:15:28.925397 [debug] [ThreadPool]: SQL status: BEGIN in 0.0 seconds
[0m21:15:28.926394 [debug] [ThreadPool]: Using postgres connection "list_dbt_dbt-facts"
[0m21:15:28.927419 [debug] [ThreadPool]: On list_dbt_dbt-facts: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "list_dbt_dbt-facts"} */
select
      'dbt' as database,
      tablename as name,
      schemaname as schema,
      'table' as type
    from pg_tables
    where schemaname ilike 'dbt-facts'
    union all
    select
      'dbt' as database,
      viewname as name,
      schemaname as schema,
      'view' as type
    from pg_views
    where schemaname ilike 'dbt-facts'
    union all
    select
      'dbt' as database,
      matviewname as name,
      schemaname as schema,
      'materialized_view' as type
    from pg_matviews
    where schemaname ilike 'dbt-facts'
  
[0m21:15:28.941413 [debug] [ThreadPool]: SQL status: SELECT 2 in 0.0 seconds
[0m21:15:28.943397 [debug] [ThreadPool]: On list_dbt_dbt-facts: ROLLBACK
[0m21:15:28.948394 [debug] [ThreadPool]: On list_dbt_dbt-facts: Close
[0m21:15:28.955004 [debug] [MainThread]: Using postgres connection "master"
[0m21:15:28.956045 [debug] [MainThread]: On master: BEGIN
[0m21:15:28.956559 [debug] [MainThread]: Opening a new connection, currently in state init
[0m21:15:28.995463 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m21:15:28.996470 [debug] [MainThread]: Using postgres connection "master"
[0m21:15:28.997465 [debug] [MainThread]: On master: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "master"} */
with relation as (
        select
            pg_rewrite.ev_class as class,
            pg_rewrite.oid as id
        from pg_rewrite
    ),
    class as (
        select
            oid as id,
            relname as name,
            relnamespace as schema,
            relkind as kind
        from pg_class
    ),
    dependency as (
        select distinct
            pg_depend.objid as id,
            pg_depend.refobjid as ref
        from pg_depend
    ),
    schema as (
        select
            pg_namespace.oid as id,
            pg_namespace.nspname as name
        from pg_namespace
        where nspname != 'information_schema' and nspname not like 'pg\_%'
    ),
    referenced as (
        select
            relation.id AS id,
            referenced_class.name ,
            referenced_class.schema ,
            referenced_class.kind
        from relation
        join class as referenced_class on relation.class=referenced_class.id
        where referenced_class.kind in ('r', 'v', 'm')
    ),
    relationships as (
        select
            referenced.name as referenced_name,
            referenced.schema as referenced_schema_id,
            dependent_class.name as dependent_name,
            dependent_class.schema as dependent_schema_id,
            referenced.kind as kind
        from referenced
        join dependency on referenced.id=dependency.id
        join class as dependent_class on dependency.ref=dependent_class.id
        where
            (referenced.name != dependent_class.name or
             referenced.schema != dependent_class.schema)
    )

    select
        referenced_schema.name as referenced_schema,
        relationships.referenced_name as referenced_name,
        dependent_schema.name as dependent_schema,
        relationships.dependent_name as dependent_name
    from relationships
    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id
    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id
    group by referenced_schema, referenced_name, dependent_schema, dependent_name
    order by referenced_schema, referenced_name, dependent_schema, dependent_name;
[0m21:15:29.062444 [debug] [MainThread]: SQL status: SELECT 0 in 0.0 seconds
[0m21:15:29.064531 [debug] [MainThread]: On master: ROLLBACK
[0m21:15:29.071988 [debug] [MainThread]: Using postgres connection "master"
[0m21:15:29.072743 [debug] [MainThread]: On master: BEGIN
[0m21:15:29.086663 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m21:15:29.087800 [debug] [MainThread]: On master: COMMIT
[0m21:15:29.088504 [debug] [MainThread]: Using postgres connection "master"
[0m21:15:29.089033 [debug] [MainThread]: On master: COMMIT
[0m21:15:29.093118 [debug] [MainThread]: SQL status: COMMIT in 0.0 seconds
[0m21:15:29.094641 [debug] [MainThread]: On master: Close
[0m21:15:29.096268 [info ] [MainThread]: Concurrency: 1 threads (target='dev')
[0m21:15:29.096795 [info ] [MainThread]: 
[0m21:15:29.100507 [debug] [Thread-1  ]: Began running node model.fact_dimensions.transactions_fact
[0m21:15:29.101037 [info ] [Thread-1  ]: 1 of 1 START sql table model dbt-facts.transactions_fact ............................................................... [RUN]
[0m21:15:29.102100 [debug] [Thread-1  ]: Acquiring new postgres connection 'model.fact_dimensions.transactions_fact'
[0m21:15:29.102630 [debug] [Thread-1  ]: Began compiling node model.fact_dimensions.transactions_fact
[0m21:15:29.123527 [debug] [Thread-1  ]: Writing injected SQL for node "model.fact_dimensions.transactions_fact"
[0m21:15:29.125620 [debug] [Thread-1  ]: Timing info for model.fact_dimensions.transactions_fact (compile): 21:15:29.102762 => 21:15:29.125104
[0m21:15:29.126570 [debug] [Thread-1  ]: Began executing node model.fact_dimensions.transactions_fact
[0m21:15:29.182503 [debug] [Thread-1  ]: Writing runtime sql for node "model.fact_dimensions.transactions_fact"
[0m21:15:29.184507 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m21:15:29.185519 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: BEGIN
[0m21:15:29.186498 [debug] [Thread-1  ]: Opening a new connection, currently in state init
[0m21:15:29.252784 [debug] [Thread-1  ]: SQL status: BEGIN in 0.0 seconds
[0m21:15:29.253786 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m21:15:29.255785 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "node_id": "model.fact_dimensions.transactions_fact"} */

  
    

  create  table "dbt"."dbt-facts"."transactions_fact__dbt_tmp"
  
  
    as
  
  (
    -- models/transactions_fact.sql



WITH cost_table AS (
         SELECT 
             td.*,
             mc.amount                                      as meeza_processing_fees,
             0                                              AS corepay_fees,
             CAST(mc.amount AS DECIMAL(10, 2))              as total_fees_cost_before_vat,
             CAST(mc.vat * mc.amount AS DECIMAL(10, 2))     as total_fees_cost_after_vat,
             0                                              AS employee_discount,
             0                                              AS transaction_discount,
             0                                              AS discount,
             null                                           AS entity,
             null                                           AS protocol,
             0                                              as price,
             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.amount AS DECIMAL(10, 2))
                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_before_vat,
             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.vat * mc.amount AS DECIMAL(10, 2))
                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        JOIN "dbt"."public"."meeza_cost" mc on td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain
        WHERE txntype in
                ('TransactionTypes_RECEIVE_P2P', 'TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN',
                 'TransactionTypes_RECEIVE_AGENT_CASH_IN', 'TransactionTypes_RECEIVE_DEPOSIT',
                 'TransactionTypes_RECEIVE_EXPAYNET')
        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT 
            td.*,
            0                AS meeza_processing_fees,
            0                AS corepay_fees,
            0                AS total_fees_cost_before_vat,
            0                AS total_fees_cost_after_vat,
            0                AS employee_discount,
            0                AS transaction_discount,
            0                AS discount,
            null             AS entity,
            null             AS protocol,
            0                as price,
            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2
              ELSE 0 END) as total_cost_before_vat,
            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2
              ELSE 0 END) as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')
        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
        
        UNION
        
        SELECT 
            td.*,
            0                                                                    AS meeza_processing_fees,
            COALESCE(bt.corepayfees::float, 0)                                   as corepay_fees,
            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_before_vat,
            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_after_vat,
            0                                                                    AS employee_discount,
            0                                                                    AS transaction_discount,
            COALESCE(bp.discount::float, 0)                                      as discount,
            tp.entity,
            tp.protocol,
            tp.price,
            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_before_vat,
            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."bankpaymenttransactions" bt ON td.txndetailsid = bt.originaltransactionid
        LEFT JOIN "dbt"."axis_sme"."bankpayments" bp ON bt.bankpaymentid = bp.bankpaymentid
        LEFT JOIN "dbt"."public"."txn_proc_cost_table" tp ON td.txntype = tp.transactiontype
              AND td.transaction_createdat_utc2 between tp.createdat and COALESCE(tp.endedat, now())

        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION
        
        SELECT 
            td.*,
            mc.amount                                                                    meeza_processing_fees,
            0                                                                         as corepay_fees,
            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_fees_cost_before_vat,
            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_fees_cost_after_vat,
            coalesce(employeefeesdiscount::float, 0)                                  as employee_discount,
            coalesce(transactionfeesdiscount::float, 0)                               as transaction_discount,
            coalesce(employeefeesdiscount::float + transactionfeesdiscount::float, 0) as discount,
            NULL                                                                      as entity,
            NULL                                                                      as protocol,
            NULL                                                                      as price,
            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +
            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_cost_before_vat,
            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +
            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."public"."meeza_cost" mc ON td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
),


revenue_table AS (
        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            coalesce(bp.vat::float, 0) as bank_vat,
            coalesce(bp.vat::float, 0) as total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            coalesce(bt.axisfees_aibyte_transform::float, 0) as bank_fees,
            coalesce(bt.axisfees_aibyte_transform::float, 0) as total_revenue_before_vat,
            coalesce(bt.axisfees_aibyte_transform::float, 0) * coalesce(bp.vat::float, 1) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."bankpaymenttransactions" bt ON td.txndetailsid = bt.originaltransactionid
        LEFT JOIN "dbt"."axis_sme"."bankpayments" bp ON bt.bankpaymentid = bp.bankpaymentid
        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT' AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE') AND isreversedflag = false

        UNION

        SELECT
            td.*,
            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,
            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,
            0 AS bank_vat,
            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,
            coalesce(employeefees::float, 0) as employee_fees,
            coalesce(fees_aibyte_transform::float, 0) as transaction_fees,
            0 AS bank_fees,
            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,
            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'
                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,
            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,
            0 AS bank_vat,
            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,
            employeefees::float as employee_fees,
            fees_aibyte_transform::float as transaction_fees,
            0 AS bank_fees,
            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,
            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat


        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_PAYROLL_DEPOSIT'
                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            coalesce(td.amount::float, 0) AS total_revenue_before_vat,
            coalesce(td.amount::float, 0) AS total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_SME_SUBSCRIPTION_PAYMENT'
          AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
          AND isreversedflag = false

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'
                THEN interchange_amount ELSE 0  END) as total_revenue_before_vat,
            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'
                THEN interchange_amount ELSE 0  END) as total_revenue_ater_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_P2P'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true
                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_before_vat,
            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true
                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN', 'TransactionTypes_ATM_CASH_OUT_REVERSAL', 'TransactionTypes_ATM_CASH_IN_REVERSAL')
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (service_fees::float) as total_revenue_before_vat,
            (service_fees::float) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            td.amount as total_revenue_before_vat,
            td.amount as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_CREATE_VCN_FEES'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_before_vat,
            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_REDEEM_SME_INADVANCE_DEPOSIT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
)
SELECT
    td.txndetailsid,
    td.transaction_createdat_utc2,
    td.transaction_modifiedat_utc2,
    td.walletdetailsid,
    coalesce(td.clientdetails ->> 'clientId', ed.clientid) as clientid,
    cd.clienttype,
    pd.walletprofileid,
    pd.partner_name,
    (CASE WHEN ed.employee_id IS NULL THEN false ELSE true END) as is_employee,
    ed.employee_id,
    td.txntype,
    td.transactionstatus,
    td.transactiondomain,
    td.interchangeaction,
    td.interchange_amount,
    td.amount,
    td.service_fees,
    td.hasservicefees,
    td.transactionreference,
    td.isreversedflag,
    ROUND(coalesce(ct.total_cost_before_vat, 0)::numeric, 2) as total_cost_before_vat,
    ROUND(coalesce(rt.total_revenue_before_vat, 0)::numeric, 2) as total_revenue_before_vat,
    ROUND(coalesce(ct.total_cost_after_vat, 0)::numeric, 2) as total_cost_after_vat,
    ROUND(coalesce(rt.total_revenue_after_vat, 0)::numeric, 2) as total_revenue_after_vat,
    ROUND(SUM(COALESCE(rt.total_revenue_before_vat, 0) - COALESCE(ct.total_cost_before_vat, 0))::numeric, 2) as total_profit

FROM "dbt"."dbt-dimensions"."transactions_dimension" td
LEFT JOIN "dbt"."dbt-dimensions"."wallets_dimension" wd ON td.walletdetailsid = wd.walletid
LEFT JOIN "dbt"."dbt-dimensions"."clients_dimension" cd ON td.clientdetails ->> 'clientId' = cd.clientid
LEFT JOIN "dbt"."dbt-dimensions"."employees_dimension" ed ON wd.walletnumber = ed.employee_mobile AND
            td.transaction_createdat_utc2 between employee_createdat and employee_deletedat
LEFT JOIN "dbt-dimensions".profiles_dimension pd ON wd.profileid = pd.walletprofileid AND wd.partnerid = pd.partnerid
LEFT join cost_table ct on td.txndetailsid = ct.txndetailsid
LEFT join revenue_table rt on td.txndetailsid = rt.txndetailsid
GROUP BY td.txndetailsid, td.transaction_createdat_utc2, td.walletdetailsid, ed.clientid, ed.employee_id, td.txntype, td.transactionstatus, td.transactiondomain, td.interchangeaction, td.interchange_amount, td.amount, td.service_fees, td.hasservicefees, td.transactionreference, td.isreversedflag,
         ct.total_cost_before_vat, rt.total_revenue_before_vat, ct.total_cost_after_vat, rt.total_revenue_after_vat, pd.walletprofileid, pd.partner_name, cd.clienttype, td.clientdetails
  );
  
[0m21:15:29.274804 [debug] [Thread-1  ]: Postgres adapter: Postgres error: column "td.transaction_modifiedat_utc2" must appear in the GROUP BY clause or be used in an aggregate function
LINE 291:     td.transaction_modifiedat_utc2,
              ^

[0m21:15:29.275803 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: ROLLBACK
[0m21:15:29.282818 [debug] [Thread-1  ]: Timing info for model.fact_dimensions.transactions_fact (execute): 21:15:29.127605 => 21:15:29.281805
[0m21:15:29.283807 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: Close
[0m21:15:29.290889 [debug] [Thread-1  ]: Database Error in model transactions_fact (models\transactions_fact.sql)
  column "td.transaction_modifiedat_utc2" must appear in the GROUP BY clause or be used in an aggregate function
  LINE 291:     td.transaction_modifiedat_utc2,
                ^
  compiled Code at target\run\fact_dimensions\models\transactions_fact.sql
[0m21:15:29.291897 [error] [Thread-1  ]: 1 of 1 ERROR creating sql table model dbt-facts.transactions_fact ...................................................... [[31mERROR[0m in 0.19s]
[0m21:15:29.293805 [debug] [Thread-1  ]: Finished running node model.fact_dimensions.transactions_fact
[0m21:15:29.296803 [debug] [MainThread]: Using postgres connection "master"
[0m21:15:29.300836 [debug] [MainThread]: On master: BEGIN
[0m21:15:29.301407 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m21:15:29.362518 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m21:15:29.363520 [debug] [MainThread]: On master: COMMIT
[0m21:15:29.364517 [debug] [MainThread]: Using postgres connection "master"
[0m21:15:29.364517 [debug] [MainThread]: On master: COMMIT
[0m21:15:29.368664 [debug] [MainThread]: SQL status: COMMIT in 0.0 seconds
[0m21:15:29.369604 [debug] [MainThread]: On master: Close
[0m21:15:29.371519 [debug] [MainThread]: Connection 'master' was properly closed.
[0m21:15:29.371519 [debug] [MainThread]: Connection 'list_dbt' was properly closed.
[0m21:15:29.372517 [debug] [MainThread]: Connection 'list_dbt_dbt-facts' was properly closed.
[0m21:15:29.372517 [debug] [MainThread]: Connection 'model.fact_dimensions.transactions_fact' was properly closed.
[0m21:15:29.373605 [info ] [MainThread]: 
[0m21:15:29.373605 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 0.63 seconds (0.63s).
[0m21:15:29.374610 [debug] [MainThread]: Command end result
[0m21:15:29.386534 [info ] [MainThread]: 
[0m21:15:29.387533 [info ] [MainThread]: [31mCompleted with 1 error and 0 warnings:[0m
[0m21:15:29.388585 [info ] [MainThread]: 
[0m21:15:29.388585 [error] [MainThread]:   Database Error in model transactions_fact (models\transactions_fact.sql)
  column "td.transaction_modifiedat_utc2" must appear in the GROUP BY clause or be used in an aggregate function
  LINE 291:     td.transaction_modifiedat_utc2,
                ^
  compiled Code at target\run\fact_dimensions\models\transactions_fact.sql
[0m21:15:29.389592 [info ] [MainThread]: 
[0m21:15:29.389592 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1
[0m21:15:29.390592 [debug] [MainThread]: Command `dbt run` failed at 21:15:29.390592 after 1.14 seconds
[0m21:15:29.390592 [debug] [MainThread]: Flushing usage events


============================== 21:16:45.495219 | 60b37538-4589-49ae-b9d9-88ef06ebf922 ==============================
[0m21:16:45.495219 [info ] [MainThread]: Running with dbt=1.7.6
[0m21:16:45.498229 [debug] [MainThread]: running dbt with arguments {'printer_width': '120', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': 'D:\\dbt-folder\\fact_dimensions', 'fail_fast': 'False', 'debug': 'False', 'log_path': 'D:\\dbt-folder\\fact_dimensions\\logs', 'version_check': 'True', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt run', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'log_format': 'default', 'send_anonymous_usage_stats': 'False'}
[0m21:16:45.746414 [info ] [MainThread]: Registered adapter: postgres=1.7.5
[0m21:16:45.752416 [debug] [MainThread]: checksum: d62e513342251256fdf8c77c78ccf3e0bf76720e6e4e8384a98b7479399def9a, vars: {}, profile: , target: , version: 1.7.6
[0m21:16:45.800864 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m21:16:45.800864 [debug] [MainThread]: Partial parsing: updated file: fact_dimensions://models\transactions_fact.sql
[0m21:16:45.935000 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.transactions_fact.example
[0m21:16:45.956802 [info ] [MainThread]: Found 1 model, 12 sources, 0 exposures, 0 metrics, 401 macros, 0 groups, 0 semantic models
[0m21:16:45.959954 [info ] [MainThread]: 
[0m21:16:45.961743 [debug] [MainThread]: Acquiring new postgres connection 'master'
[0m21:16:45.964512 [debug] [ThreadPool]: Acquiring new postgres connection 'list_dbt'
[0m21:16:46.060267 [debug] [ThreadPool]: Using postgres connection "list_dbt"
[0m21:16:46.061354 [debug] [ThreadPool]: On list_dbt: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "list_dbt"} */

    select distinct nspname from pg_namespace
  
[0m21:16:46.061874 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m21:16:46.104081 [debug] [ThreadPool]: SQL status: SELECT 9 in 0.0 seconds
[0m21:16:46.108087 [debug] [ThreadPool]: On list_dbt: Close
[0m21:16:46.111428 [debug] [ThreadPool]: Acquiring new postgres connection 'list_dbt_dbt-facts'
[0m21:16:46.117944 [debug] [ThreadPool]: Using postgres connection "list_dbt_dbt-facts"
[0m21:16:46.118461 [debug] [ThreadPool]: On list_dbt_dbt-facts: BEGIN
[0m21:16:46.118461 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m21:16:46.177261 [debug] [ThreadPool]: SQL status: BEGIN in 0.0 seconds
[0m21:16:46.178384 [debug] [ThreadPool]: Using postgres connection "list_dbt_dbt-facts"
[0m21:16:46.178384 [debug] [ThreadPool]: On list_dbt_dbt-facts: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "list_dbt_dbt-facts"} */
select
      'dbt' as database,
      tablename as name,
      schemaname as schema,
      'table' as type
    from pg_tables
    where schemaname ilike 'dbt-facts'
    union all
    select
      'dbt' as database,
      viewname as name,
      schemaname as schema,
      'view' as type
    from pg_views
    where schemaname ilike 'dbt-facts'
    union all
    select
      'dbt' as database,
      matviewname as name,
      schemaname as schema,
      'materialized_view' as type
    from pg_matviews
    where schemaname ilike 'dbt-facts'
  
[0m21:16:46.190522 [debug] [ThreadPool]: SQL status: SELECT 2 in 0.0 seconds
[0m21:16:46.193514 [debug] [ThreadPool]: On list_dbt_dbt-facts: ROLLBACK
[0m21:16:46.221729 [debug] [ThreadPool]: On list_dbt_dbt-facts: Close
[0m21:16:46.234811 [debug] [MainThread]: Using postgres connection "master"
[0m21:16:46.236740 [debug] [MainThread]: On master: BEGIN
[0m21:16:46.238728 [debug] [MainThread]: Opening a new connection, currently in state init
[0m21:16:46.316318 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m21:16:46.318318 [debug] [MainThread]: Using postgres connection "master"
[0m21:16:46.320319 [debug] [MainThread]: On master: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "connection_name": "master"} */
with relation as (
        select
            pg_rewrite.ev_class as class,
            pg_rewrite.oid as id
        from pg_rewrite
    ),
    class as (
        select
            oid as id,
            relname as name,
            relnamespace as schema,
            relkind as kind
        from pg_class
    ),
    dependency as (
        select distinct
            pg_depend.objid as id,
            pg_depend.refobjid as ref
        from pg_depend
    ),
    schema as (
        select
            pg_namespace.oid as id,
            pg_namespace.nspname as name
        from pg_namespace
        where nspname != 'information_schema' and nspname not like 'pg\_%'
    ),
    referenced as (
        select
            relation.id AS id,
            referenced_class.name ,
            referenced_class.schema ,
            referenced_class.kind
        from relation
        join class as referenced_class on relation.class=referenced_class.id
        where referenced_class.kind in ('r', 'v', 'm')
    ),
    relationships as (
        select
            referenced.name as referenced_name,
            referenced.schema as referenced_schema_id,
            dependent_class.name as dependent_name,
            dependent_class.schema as dependent_schema_id,
            referenced.kind as kind
        from referenced
        join dependency on referenced.id=dependency.id
        join class as dependent_class on dependency.ref=dependent_class.id
        where
            (referenced.name != dependent_class.name or
             referenced.schema != dependent_class.schema)
    )

    select
        referenced_schema.name as referenced_schema,
        relationships.referenced_name as referenced_name,
        dependent_schema.name as dependent_schema,
        relationships.dependent_name as dependent_name
    from relationships
    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id
    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id
    group by referenced_schema, referenced_name, dependent_schema, dependent_name
    order by referenced_schema, referenced_name, dependent_schema, dependent_name;
[0m21:16:46.386352 [debug] [MainThread]: SQL status: SELECT 0 in 0.0 seconds
[0m21:16:46.390890 [debug] [MainThread]: On master: ROLLBACK
[0m21:16:46.397908 [debug] [MainThread]: Using postgres connection "master"
[0m21:16:46.398913 [debug] [MainThread]: On master: BEGIN
[0m21:16:46.406106 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m21:16:46.407122 [debug] [MainThread]: On master: COMMIT
[0m21:16:46.408118 [debug] [MainThread]: Using postgres connection "master"
[0m21:16:46.408118 [debug] [MainThread]: On master: COMMIT
[0m21:16:46.412122 [debug] [MainThread]: SQL status: COMMIT in 0.0 seconds
[0m21:16:46.413131 [debug] [MainThread]: On master: Close
[0m21:16:46.414122 [info ] [MainThread]: Concurrency: 1 threads (target='dev')
[0m21:16:46.415122 [info ] [MainThread]: 
[0m21:16:46.419603 [debug] [Thread-1  ]: Began running node model.fact_dimensions.transactions_fact
[0m21:16:46.423612 [info ] [Thread-1  ]: 1 of 1 START sql table model dbt-facts.transactions_fact ............................................................... [RUN]
[0m21:16:46.425613 [debug] [Thread-1  ]: Acquiring new postgres connection 'model.fact_dimensions.transactions_fact'
[0m21:16:46.426612 [debug] [Thread-1  ]: Began compiling node model.fact_dimensions.transactions_fact
[0m21:16:46.444616 [debug] [Thread-1  ]: Writing injected SQL for node "model.fact_dimensions.transactions_fact"
[0m21:16:46.445633 [debug] [Thread-1  ]: Timing info for model.fact_dimensions.transactions_fact (compile): 21:16:46.426612 => 21:16:46.445633
[0m21:16:46.446622 [debug] [Thread-1  ]: Began executing node model.fact_dimensions.transactions_fact
[0m21:16:46.495154 [debug] [Thread-1  ]: Writing runtime sql for node "model.fact_dimensions.transactions_fact"
[0m21:16:46.498052 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m21:16:46.498052 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: BEGIN
[0m21:16:46.499135 [debug] [Thread-1  ]: Opening a new connection, currently in state init
[0m21:16:46.530303 [debug] [Thread-1  ]: SQL status: BEGIN in 0.0 seconds
[0m21:16:46.531302 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m21:16:46.533302 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "node_id": "model.fact_dimensions.transactions_fact"} */

  
    

  create  table "dbt"."dbt-facts"."transactions_fact__dbt_tmp"
  
  
    as
  
  (
    -- models/transactions_fact.sql



WITH cost_table AS (
         SELECT 
             td.*,
             mc.amount                                      as meeza_processing_fees,
             0                                              AS corepay_fees,
             CAST(mc.amount AS DECIMAL(10, 2))              as total_fees_cost_before_vat,
             CAST(mc.vat * mc.amount AS DECIMAL(10, 2))     as total_fees_cost_after_vat,
             0                                              AS employee_discount,
             0                                              AS transaction_discount,
             0                                              AS discount,
             null                                           AS entity,
             null                                           AS protocol,
             0                                              as price,
             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.amount AS DECIMAL(10, 2))
                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_before_vat,
             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.vat * mc.amount AS DECIMAL(10, 2))
                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        JOIN "dbt"."public"."meeza_cost" mc on td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain
        WHERE txntype in
                ('TransactionTypes_RECEIVE_P2P', 'TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN',
                 'TransactionTypes_RECEIVE_AGENT_CASH_IN', 'TransactionTypes_RECEIVE_DEPOSIT',
                 'TransactionTypes_RECEIVE_EXPAYNET')
        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT 
            td.*,
            0                AS meeza_processing_fees,
            0                AS corepay_fees,
            0                AS total_fees_cost_before_vat,
            0                AS total_fees_cost_after_vat,
            0                AS employee_discount,
            0                AS transaction_discount,
            0                AS discount,
            null             AS entity,
            null             AS protocol,
            0                as price,
            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2
              ELSE 0 END) as total_cost_before_vat,
            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2
              ELSE 0 END) as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')
        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
        
        UNION
        
        SELECT 
            td.*,
            0                                                                    AS meeza_processing_fees,
            COALESCE(bt.corepayfees::float, 0)                                   as corepay_fees,
            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_before_vat,
            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_after_vat,
            0                                                                    AS employee_discount,
            0                                                                    AS transaction_discount,
            COALESCE(bp.discount::float, 0)                                      as discount,
            tp.entity,
            tp.protocol,
            tp.price,
            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_before_vat,
            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."bankpaymenttransactions" bt ON td.txndetailsid = bt.originaltransactionid
        LEFT JOIN "dbt"."axis_sme"."bankpayments" bp ON bt.bankpaymentid = bp.bankpaymentid
        LEFT JOIN "dbt"."public"."txn_proc_cost_table" tp ON td.txntype = tp.transactiontype
              AND td.transaction_createdat_utc2 between tp.createdat and COALESCE(tp.endedat, now())

        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION
        
        SELECT 
            td.*,
            mc.amount                                                                    meeza_processing_fees,
            0                                                                         as corepay_fees,
            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_fees_cost_before_vat,
            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_fees_cost_after_vat,
            coalesce(employeefeesdiscount::float, 0)                                  as employee_discount,
            coalesce(transactionfeesdiscount::float, 0)                               as transaction_discount,
            coalesce(employeefeesdiscount::float + transactionfeesdiscount::float, 0) as discount,
            NULL                                                                      as entity,
            NULL                                                                      as protocol,
            NULL                                                                      as price,
            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +
            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_cost_before_vat,
            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +
            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_cost_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."public"."meeza_cost" mc ON td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
),


revenue_table AS (
        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            coalesce(bp.vat::float, 0) as bank_vat,
            coalesce(bp.vat::float, 0) as total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            coalesce(bt.axisfees_aibyte_transform::float, 0) as bank_fees,
            coalesce(bt.axisfees_aibyte_transform::float, 0) as total_revenue_before_vat,
            coalesce(bt.axisfees_aibyte_transform::float, 0) * coalesce(bp.vat::float, 1) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."bankpaymenttransactions" bt ON td.txndetailsid = bt.originaltransactionid
        LEFT JOIN "dbt"."axis_sme"."bankpayments" bp ON bt.bankpaymentid = bp.bankpaymentid
        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT' AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE') AND isreversedflag = false

        UNION

        SELECT
            td.*,
            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,
            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,
            0 AS bank_vat,
            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,
            coalesce(employeefees::float, 0) as employee_fees,
            coalesce(fees_aibyte_transform::float, 0) as transaction_fees,
            0 AS bank_fees,
            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,
            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'
                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,
            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,
            0 AS bank_vat,
            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,
            employeefees::float as employee_fees,
            fees_aibyte_transform::float as transaction_fees,
            0 AS bank_fees,
            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,
            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat


        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        LEFT JOIN "dbt"."axis_sme"."disbursementtransactions" dt ON td.transactionreference = dt.wallettransactionreference
        WHERE txntype = 'TransactionTypes_SEND_SME_PAYROLL_DEPOSIT'
                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            coalesce(td.amount::float, 0) AS total_revenue_before_vat,
            coalesce(td.amount::float, 0) AS total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_SME_SUBSCRIPTION_PAYMENT'
          AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
          AND isreversedflag = false

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'
                THEN interchange_amount ELSE 0  END) as total_revenue_before_vat,
            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'
                THEN interchange_amount ELSE 0  END) as total_revenue_ater_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_P2P'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true
                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_before_vat,
            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true
                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN', 'TransactionTypes_ATM_CASH_OUT_REVERSAL', 'TransactionTypes_ATM_CASH_IN_REVERSAL')
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            (service_fees::float) as total_revenue_before_vat,
            (service_fees::float) as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            td.amount as total_revenue_before_vat,
            td.amount as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_CREATE_VCN_FEES'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')

        UNION

        SELECT
            td.*,
            0 AS employee_vat,
            0 AS transaction_vat,
            0 AS bank_vat,
            0 AS total_vat,
            0 AS employee_fees,
            0 AS transaction_fees,
            0 AS bank_fees,
            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_before_vat,
            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_after_vat

        FROM "dbt"."dbt-dimensions"."transactions_dimension" td
        WHERE txntype = 'TransactionTypes_SEND_REDEEM_SME_INADVANCE_DEPOSIT'
            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')
)
SELECT
    td.txndetailsid,
    td.transaction_createdat_utc2,
    td.transaction_modifiedat_utc2,
    td.walletdetailsid,
    coalesce(td.clientdetails ->> 'clientId', ed.clientid) as clientid,
    cd.clienttype,
    pd.walletprofileid,
    pd.partner_name,
    (CASE WHEN ed.employee_id IS NULL THEN false ELSE true END) as is_employee,
    ed.employee_id,
    td.txntype,
    td.transactionstatus,
    td.transactiondomain,
    td.interchangeaction,
    td.interchange_amount,
    td.amount,
    td.service_fees,
    td.hasservicefees,
    td.transactionreference,
    td.isreversedflag,
    ROUND(coalesce(ct.total_cost_before_vat, 0)::numeric, 2) as total_cost_before_vat,
    ROUND(coalesce(rt.total_revenue_before_vat, 0)::numeric, 2) as total_revenue_before_vat,
    ROUND(coalesce(ct.total_cost_after_vat, 0)::numeric, 2) as total_cost_after_vat,
    ROUND(coalesce(rt.total_revenue_after_vat, 0)::numeric, 2) as total_revenue_after_vat,
    ROUND(SUM(COALESCE(rt.total_revenue_before_vat, 0) - COALESCE(ct.total_cost_before_vat, 0))::numeric, 2) as total_profit

FROM "dbt"."dbt-dimensions"."transactions_dimension" td
LEFT JOIN "dbt"."dbt-dimensions"."wallets_dimension" wd ON td.walletdetailsid = wd.walletid
LEFT JOIN "dbt"."dbt-dimensions"."clients_dimension" cd ON td.clientdetails ->> 'clientId' = cd.clientid
LEFT JOIN "dbt"."dbt-dimensions"."employees_dimension" ed ON wd.walletnumber = ed.employee_mobile AND
            td.transaction_createdat_utc2 between employee_createdat and employee_deletedat
LEFT JOIN "dbt-dimensions".profiles_dimension pd ON wd.profileid = pd.walletprofileid AND wd.partnerid = pd.partnerid
LEFT join cost_table ct on td.txndetailsid = ct.txndetailsid
LEFT join revenue_table rt on td.txndetailsid = rt.txndetailsid
GROUP BY td.txndetailsid, td.transaction_createdat_utc2, td.transaction_modifiedat_utc2, td.walletdetailsid, ed.clientid, ed.employee_id, td.txntype, td.transactionstatus, td.transactiondomain, td.interchangeaction, td.interchange_amount, td.amount, td.service_fees, td.hasservicefees, td.transactionreference, td.isreversedflag,
         ct.total_cost_before_vat, rt.total_revenue_before_vat, ct.total_cost_after_vat, rt.total_revenue_after_vat, pd.walletprofileid, pd.partner_name, cd.clienttype, td.clientdetails
  );
  
[0m21:16:50.848068 [debug] [Thread-1  ]: SQL status: SELECT 112268 in 4.0 seconds
[0m21:16:50.856531 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m21:16:50.857531 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "node_id": "model.fact_dimensions.transactions_fact"} */
alter table "dbt"."dbt-facts"."transactions_fact" rename to "transactions_fact__dbt_backup"
[0m21:16:50.864509 [debug] [Thread-1  ]: SQL status: ALTER TABLE in 0.0 seconds
[0m21:16:50.871852 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m21:16:50.871852 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "node_id": "model.fact_dimensions.transactions_fact"} */
alter table "dbt"."dbt-facts"."transactions_fact__dbt_tmp" rename to "transactions_fact"
[0m21:16:50.875849 [debug] [Thread-1  ]: SQL status: ALTER TABLE in 0.0 seconds
[0m21:16:50.896391 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: COMMIT
[0m21:16:50.897391 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m21:16:50.898393 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: COMMIT
[0m21:16:50.919391 [debug] [Thread-1  ]: SQL status: COMMIT in 0.0 seconds
[0m21:16:50.929790 [debug] [Thread-1  ]: Applying DROP to: "dbt"."dbt-facts"."transactions_fact__dbt_backup"
[0m21:16:50.937340 [debug] [Thread-1  ]: Using postgres connection "model.fact_dimensions.transactions_fact"
[0m21:16:50.937340 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: /* {"app": "dbt", "dbt_version": "1.7.6", "profile_name": "fact_dimensions", "target_name": "dev", "node_id": "model.fact_dimensions.transactions_fact"} */
drop table if exists "dbt"."dbt-facts"."transactions_fact__dbt_backup" cascade
[0m21:16:50.952341 [debug] [Thread-1  ]: SQL status: DROP TABLE in 0.0 seconds
[0m21:16:50.954342 [debug] [Thread-1  ]: Timing info for model.fact_dimensions.transactions_fact (execute): 21:16:46.446622 => 21:16:50.954342
[0m21:16:50.955341 [debug] [Thread-1  ]: On model.fact_dimensions.transactions_fact: Close
[0m21:16:50.956341 [info ] [Thread-1  ]: 1 of 1 OK created sql table model dbt-facts.transactions_fact .......................................................... [[32mSELECT 112268[0m in 4.53s]
[0m21:16:50.957341 [debug] [Thread-1  ]: Finished running node model.fact_dimensions.transactions_fact
[0m21:16:50.958341 [debug] [MainThread]: Using postgres connection "master"
[0m21:16:50.959348 [debug] [MainThread]: On master: BEGIN
[0m21:16:50.959348 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m21:16:50.995831 [debug] [MainThread]: SQL status: BEGIN in 0.0 seconds
[0m21:16:50.996831 [debug] [MainThread]: On master: COMMIT
[0m21:16:50.996831 [debug] [MainThread]: Using postgres connection "master"
[0m21:16:50.996831 [debug] [MainThread]: On master: COMMIT
[0m21:16:51.003831 [debug] [MainThread]: SQL status: COMMIT in 0.0 seconds
[0m21:16:51.004829 [debug] [MainThread]: On master: Close
[0m21:16:51.005829 [debug] [MainThread]: Connection 'master' was properly closed.
[0m21:16:51.006829 [debug] [MainThread]: Connection 'list_dbt' was properly closed.
[0m21:16:51.006829 [debug] [MainThread]: Connection 'list_dbt_dbt-facts' was properly closed.
[0m21:16:51.006829 [debug] [MainThread]: Connection 'model.fact_dimensions.transactions_fact' was properly closed.
[0m21:16:51.007828 [info ] [MainThread]: 
[0m21:16:51.007828 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 5.05 seconds (5.05s).
[0m21:16:51.008829 [debug] [MainThread]: Command end result
[0m21:16:51.019245 [info ] [MainThread]: 
[0m21:16:51.020245 [info ] [MainThread]: [32mCompleted successfully[0m
[0m21:16:51.020245 [info ] [MainThread]: 
[0m21:16:51.021244 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1
[0m21:16:51.022245 [debug] [MainThread]: Command `dbt run` succeeded at 21:16:51.022245 after 5.57 seconds
[0m21:16:51.022245 [debug] [MainThread]: Flushing usage events
