{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.6", "generated_at": "2024-03-04T19:16:51.007828Z", "invocation_id": "60b37538-4589-49ae-b9d9-88ef06ebf922", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-04T19:16:46.426612Z", "completed_at": "2024-03-04T19:16:46.445633Z"}, {"name": "execute", "started_at": "2024-03-04T19:16:46.446622Z", "completed_at": "2024-03-04T19:16:50.954342Z"}], "thread_id": "Thread-1", "execution_time": 4.530707836151123, "adapter_response": {"_message": "SELECT 112268", "code": "SELECT", "rows_affected": 112268}, "message": "SELECT 112268", "failures": null, "unique_id": "model.fact_dimensions.transactions_fact", "compiled": true, "compiled_code": "-- models/transactions_fact.sql\n\n\n\nWITH cost_table AS (\n         SELECT \n             td.*,\n             mc.amount                                      as meeza_processing_fees,\n             0                                              AS corepay_fees,\n             CAST(mc.amount AS DECIMAL(10, 2))              as total_fees_cost_before_vat,\n             CAST(mc.vat * mc.amount AS DECIMAL(10, 2))     as total_fees_cost_after_vat,\n             0                                              AS employee_discount,\n             0                                              AS transaction_discount,\n             0                                              AS discount,\n             null                                           AS entity,\n             null                                           AS protocol,\n             0                                              as price,\n             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.amount AS DECIMAL(10, 2))\n                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_before_vat,\n             CASE WHEN lower(interchangeaction) = 'debit' THEN CAST(interchange_amount AS DECIMAL(10, 2)) + CAST(mc.vat * mc.amount AS DECIMAL(10, 2))\n                 ELSE CAST(mc.amount AS DECIMAL(10, 2)) END as total_cost_after_vat\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        JOIN \"dbt\".\"public\".\"meeza_cost\" mc on td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain\n        WHERE txntype in\n                ('TransactionTypes_RECEIVE_P2P', 'TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN',\n                 'TransactionTypes_RECEIVE_AGENT_CASH_IN', 'TransactionTypes_RECEIVE_DEPOSIT',\n                 'TransactionTypes_RECEIVE_EXPAYNET')\n        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')\n\n        UNION\n\n        SELECT \n            td.*,\n            0                AS meeza_processing_fees,\n            0                AS corepay_fees,\n            0                AS total_fees_cost_before_vat,\n            0                AS total_fees_cost_after_vat,\n            0                AS employee_discount,\n            0                AS transaction_discount,\n            0                AS discount,\n            null             AS entity,\n            null             AS protocol,\n            0                as price,\n            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2\n              ELSE 0 END) as total_cost_before_vat,\n            (CASE WHEN transactiondomain = 'TransactionDomains_OFF_US' THEN service_fees / 2\n              ELSE 0 END) as total_cost_after_vat\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')\n        AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')\n        \n        UNION\n        \n        SELECT \n            td.*,\n            0                                                                    AS meeza_processing_fees,\n            COALESCE(bt.corepayfees::float, 0)                                   as corepay_fees,\n            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_before_vat,\n            COALESCE(bt.corepayfees::float, 0)                                   as total_fees_cost_after_vat,\n            0                                                                    AS employee_discount,\n            0                                                                    AS transaction_discount,\n            COALESCE(bp.discount::float, 0)                                      as discount,\n            tp.entity,\n            tp.protocol,\n            tp.price,\n            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_before_vat,\n            COALESCE(bt.corepayfees::float, 0) + COALESCE(bp.discount::float, 0) as total_cost_after_vat\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        LEFT JOIN \"dbt\".\"axis_sme\".\"bankpaymenttransactions\" bt ON td.txndetailsid = bt.originaltransactionid\n        LEFT JOIN \"dbt\".\"axis_sme\".\"bankpayments\" bp ON bt.bankpaymentid = bp.bankpaymentid\n        LEFT JOIN \"dbt\".\"public\".\"txn_proc_cost_table\" tp ON td.txntype = tp.transactiontype\n              AND td.transaction_createdat_utc2 between tp.createdat and COALESCE(tp.endedat, now())\n\n        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT'\n            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')\n\n        UNION\n        \n        SELECT \n            td.*,\n            mc.amount                                                                    meeza_processing_fees,\n            0                                                                         as corepay_fees,\n            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_fees_cost_before_vat,\n            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_fees_cost_after_vat,\n            coalesce(employeefeesdiscount::float, 0)                                  as employee_discount,\n            coalesce(transactionfeesdiscount::float, 0)                               as transaction_discount,\n            coalesce(employeefeesdiscount::float + transactionfeesdiscount::float, 0) as discount,\n            NULL                                                                      as entity,\n            NULL                                                                      as protocol,\n            NULL                                                                      as price,\n            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +\n            CAST(mc.amount AS DECIMAL(10, 2))                                         as total_cost_before_vat,\n            coalesce(employeefeesdiscount::float, 0) + coalesce(transactionfeesdiscount::float, 0) +\n            CAST(mc.vat * mc.amount AS DECIMAL(10, 2))                                as total_cost_after_vat\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        LEFT JOIN \"dbt\".\"public\".\"meeza_cost\" mc ON td.txntype = mc.transactiontype AND td.transactiondomain = mc.transactiondomain\n        LEFT JOIN \"dbt\".\"axis_sme\".\"disbursementtransactions\" dt ON td.transactionreference = dt.wallettransactionreference\n        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'\n            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')\n),\n\n\nrevenue_table AS (\n        SELECT\n            td.*,\n            0 AS employee_vat,\n            0 AS transaction_vat,\n            coalesce(bp.vat::float, 0) as bank_vat,\n            coalesce(bp.vat::float, 0) as total_vat,\n            0 AS employee_fees,\n            0 AS transaction_fees,\n            coalesce(bt.axisfees_aibyte_transform::float, 0) as bank_fees,\n            coalesce(bt.axisfees_aibyte_transform::float, 0) as total_revenue_before_vat,\n            coalesce(bt.axisfees_aibyte_transform::float, 0) * coalesce(bp.vat::float, 1) as total_revenue_after_vat\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        LEFT JOIN \"dbt\".\"axis_sme\".\"bankpaymenttransactions\" bt ON td.txndetailsid = bt.originaltransactionid\n        LEFT JOIN \"dbt\".\"axis_sme\".\"bankpayments\" bp ON bt.bankpaymentid = bp.bankpaymentid\n        WHERE txntype = 'TransactionTypes_SEND_BANK_PAYMENT' AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE') AND isreversedflag = false\n\n        UNION\n\n        SELECT\n            td.*,\n            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,\n            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,\n            0 AS bank_vat,\n            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,\n            coalesce(employeefees::float, 0) as employee_fees,\n            coalesce(fees_aibyte_transform::float, 0) as transaction_fees,\n            0 AS bank_fees,\n            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,\n            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        LEFT JOIN \"dbt\".\"axis_sme\".\"disbursementtransactions\" dt ON td.transactionreference = dt.wallettransactionreference\n        WHERE txntype = 'TransactionTypes_SEND_SME_DEPOSIT'\n                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')\n\n        UNION\n\n        SELECT\n            td.*,\n            coalesce(employeefeesvat_aibyte_transform::float, 0) as employee_vat,\n            coalesce(transactionfeesvat_aibyte_transform::float, 0) as transaction_vat,\n            0 AS bank_vat,\n            coalesce(employeefeesvat_aibyte_transform::float, 0) + coalesce(transactionfeesvat_aibyte_transform::float, 0) as total_vat,\n            employeefees::float as employee_fees,\n            fees_aibyte_transform::float as transaction_fees,\n            0 AS bank_fees,\n            coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0) as total_revenue_before_vat,\n            (coalesce(employeefeesvat_aibyte_transform::float, 1) + coalesce(transactionfeesvat_aibyte_transform::float, 1)) * (coalesce(employeefees::float, 0) + coalesce(fees_aibyte_transform::float, 0)) as total_revenue_after_vat\n\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        LEFT JOIN \"dbt\".\"axis_sme\".\"disbursementtransactions\" dt ON td.transactionreference = dt.wallettransactionreference\n        WHERE txntype = 'TransactionTypes_SEND_SME_PAYROLL_DEPOSIT'\n                AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')\n\n        UNION\n\n        SELECT\n            td.*,\n            0 AS employee_vat,\n            0 AS transaction_vat,\n            0 AS bank_vat,\n            0 AS total_vat,\n            0 AS employee_fees,\n            0 AS transaction_fees,\n            0 AS bank_fees,\n            coalesce(td.amount::float, 0) AS total_revenue_before_vat,\n            coalesce(td.amount::float, 0) AS total_revenue_after_vat\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        WHERE txntype = 'TransactionTypes_SEND_SME_SUBSCRIPTION_PAYMENT'\n          AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')\n          AND isreversedflag = false\n\n        UNION\n\n        SELECT\n            td.*,\n            0 AS employee_vat,\n            0 AS transaction_vat,\n            0 AS bank_vat,\n            0 AS total_vat,\n            0 AS employee_fees,\n            0 AS transaction_fees,\n            0 AS bank_fees,\n            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'\n                THEN interchange_amount ELSE 0  END) as total_revenue_before_vat,\n            (CASE WHEN lower(interchangeaction) = 'credit' AND transactiondomain = 'TransactionDomains_OFF_US'\n                THEN interchange_amount ELSE 0  END) as total_revenue_ater_vat\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        WHERE txntype = 'TransactionTypes_SEND_P2P'\n            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')\n\n        UNION\n\n        SELECT\n            td.*,\n            0 AS employee_vat,\n            0 AS transaction_vat,\n            0 AS bank_vat,\n            0 AS total_vat,\n            0 AS employee_fees,\n            0 AS transaction_fees,\n            0 AS bank_fees,\n            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true\n                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_before_vat,\n            (CASE WHEN lower(interchangeaction) = 'credit' AND hasservicefees = true\n                THEN interchange_amount + (service_fees::float) ELSE coalesce(service_fees::float, 0) END) as total_revenue_after_vat\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        WHERE txntype in ('TransactionTypes_ATM_CASH_OUT', 'TransactionTypes_ATM_CASH_IN', 'TransactionTypes_ATM_CASH_OUT_REVERSAL', 'TransactionTypes_ATM_CASH_IN_REVERSAL')\n            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')\n\n        UNION\n\n        SELECT\n            td.*,\n            0 AS employee_vat,\n            0 AS transaction_vat,\n            0 AS bank_vat,\n            0 AS total_vat,\n            0 AS employee_fees,\n            0 AS transaction_fees,\n            0 AS bank_fees,\n            (service_fees::float) as total_revenue_before_vat,\n            (service_fees::float) as total_revenue_after_vat\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        WHERE txntype in ('TransactionTypes_BILL_PAYMENT', 'TransactionTypes_TOP_UP')\n            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')\n\n        UNION\n\n        SELECT\n            td.*,\n            0 AS employee_vat,\n            0 AS transaction_vat,\n            0 AS bank_vat,\n            0 AS total_vat,\n            0 AS employee_fees,\n            0 AS transaction_fees,\n            0 AS bank_fees,\n            td.amount as total_revenue_before_vat,\n            td.amount as total_revenue_after_vat\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        WHERE txntype = 'TransactionTypes_CREATE_VCN_FEES'\n            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')\n\n        UNION\n\n        SELECT\n            td.*,\n            0 AS employee_vat,\n            0 AS transaction_vat,\n            0 AS bank_vat,\n            0 AS total_vat,\n            0 AS employee_fees,\n            0 AS transaction_fees,\n            0 AS bank_fees,\n            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_before_vat,\n            CASE WHEN hasservicefees = true THEN td.service_fees ELSE 0 END as total_revenue_after_vat\n\n        FROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\n        WHERE txntype = 'TransactionTypes_SEND_REDEEM_SME_INADVANCE_DEPOSIT'\n            AND transactionstatus IN ('TransactionStatus_POSTED', 'TransactionStatus_PENDING_ADVICE')\n)\nSELECT\n    td.txndetailsid,\n    td.transaction_createdat_utc2,\n    td.transaction_modifiedat_utc2,\n    td.walletdetailsid,\n    coalesce(td.clientdetails ->> 'clientId', ed.clientid) as clientid,\n    cd.clienttype,\n    pd.walletprofileid,\n    pd.partner_name,\n    (CASE WHEN ed.employee_id IS NULL THEN false ELSE true END) as is_employee,\n    ed.employee_id,\n    td.txntype,\n    td.transactionstatus,\n    td.transactiondomain,\n    td.interchangeaction,\n    td.interchange_amount,\n    td.amount,\n    td.service_fees,\n    td.hasservicefees,\n    td.transactionreference,\n    td.isreversedflag,\n    ROUND(coalesce(ct.total_cost_before_vat, 0)::numeric, 2) as total_cost_before_vat,\n    ROUND(coalesce(rt.total_revenue_before_vat, 0)::numeric, 2) as total_revenue_before_vat,\n    ROUND(coalesce(ct.total_cost_after_vat, 0)::numeric, 2) as total_cost_after_vat,\n    ROUND(coalesce(rt.total_revenue_after_vat, 0)::numeric, 2) as total_revenue_after_vat,\n    ROUND(SUM(COALESCE(rt.total_revenue_before_vat, 0) - COALESCE(ct.total_cost_before_vat, 0))::numeric, 2) as total_profit\n\nFROM \"dbt\".\"dbt-dimensions\".\"transactions_dimension\" td\nLEFT JOIN \"dbt\".\"dbt-dimensions\".\"wallets_dimension\" wd ON td.walletdetailsid = wd.walletid\nLEFT JOIN \"dbt\".\"dbt-dimensions\".\"clients_dimension\" cd ON td.clientdetails ->> 'clientId' = cd.clientid\nLEFT JOIN \"dbt\".\"dbt-dimensions\".\"employees_dimension\" ed ON wd.walletnumber = ed.employee_mobile AND\n            td.transaction_createdat_utc2 between employee_createdat and employee_deletedat\nLEFT JOIN \"dbt-dimensions\".profiles_dimension pd ON wd.profileid = pd.walletprofileid AND wd.partnerid = pd.partnerid\nLEFT join cost_table ct on td.txndetailsid = ct.txndetailsid\nLEFT join revenue_table rt on td.txndetailsid = rt.txndetailsid\nGROUP BY td.txndetailsid, td.transaction_createdat_utc2, td.transaction_modifiedat_utc2, td.walletdetailsid, ed.clientid, ed.employee_id, td.txntype, td.transactionstatus, td.transactiondomain, td.interchangeaction, td.interchange_amount, td.amount, td.service_fees, td.hasservicefees, td.transactionreference, td.isreversedflag,\n         ct.total_cost_before_vat, rt.total_revenue_before_vat, ct.total_cost_after_vat, rt.total_revenue_after_vat, pd.walletprofileid, pd.partner_name, cd.clienttype, td.clientdetails", "relation_name": "\"dbt\".\"dbt-facts\".\"transactions_fact\""}], "elapsed_time": 5.046272277832031, "args": {"log_path": "D:\\dbt-folder\\fact_dimensions\\logs", "vars": {}, "favor_state": false, "static_parser": true, "show_resource_report": false, "indirect_selection": "eager", "partial_parse": true, "project_dir": "D:\\dbt-folder\\fact_dimensions", "log_format_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "use_colors": true, "strict_mode": false, "log_level": "info", "profiles_dir": "D:\\dbt-folder\\fact_dimensions", "log_level_file": "debug", "which": "run", "invocation_command": "dbt run", "defer": false, "macro_debugging": false, "send_anonymous_usage_stats": false, "enable_legacy_logger": false, "printer_width": 120, "select": [], "use_colors_file": true, "introspect": true, "version_check": true, "partial_parse_file_diff": true, "print": true, "log_format": "default", "cache_selected_only": false, "log_file_max_bytes": 10485760, "populate_cache": true, "write_json": true, "exclude": [], "quiet": false}}